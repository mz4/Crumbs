{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TOOLS Tools and stuff useful for both frontend and backend. GIT Install git sudo apt-get update sudo apt-get upgrade sudo apt-get install git git --version Create a New Git Repository from scratch mkdir to create a directory to contain the project. cd into the new directory. git init. Write code. (The first file to create is probably a ReadMe file) git add to add the files. git commit Create New Git Repository from existing project cd into the directory containing the project. git init. git add to add all of the relevant files. create a .gitignore to indicate all of the files you don\u2019t want to track git commit. Connect to github Go to github. Log in to your account. Click the new repository button in the top-right. Click the \u201cCreate repository\u201d button. git remote add origin git@github.com:username/new_repo git push -u origin master Create, switch and push origin new branch git checkout -b issue400-master git push -u origin issue400-master Add, Commit and Push git add sys_ui/css/FILE.css git add sys_ui/FILE.html git add app/dir/ git commit git push Squash commits git reset --soft HEAD~$squashCount git commit -m $commitMsg Delete a local and remote branch git branch -d branch_name git push origin --delete branch_name Clone repo git clone USER@10.0.2.10:/home/git/repos/sys . Clone specific branch git clone -b branch remote_repo git clone -b my-branch git@github.com:user/myproject.git Show current branch git branch Show local and remote branch git branch -a Check Status git status Check Log git log Edit Last Commit Message git commit --amend -m New commit message Log commit subject of last 10 commits git log -10 --pretty=format: %h %s Single file history git log -p filename Get tag git log --decorate v0.4bugfix|head -n1|sed 's/.*tag: //;s/[^a-zA-Z.0-9].*//' Get commits by date and author git log --pretty=format: %ad - %an: %s --after= 2010-02-15 --until= 2018-08-20 --author= John Get number of commits by author git shortlog -s -n --all Remove local untracked files git clean -fdx Undo last commit. Warning: Don't do this if you've already pushed git reset HEAD~ Undo last commit. If you don't want the changes and blow everything away: Warning: Don't do this if you've already pushed git reset --hard HEAD~ Untrack .pyc files $ find . -name '*.pyc' | xargs -n 1 git rm --cached Switch to branch git checkout BRANCHNAME Pull from master branch git pull origin master Checkout master git chekcout master Merge branch into master git checkout master git merge user_interface Create Tags git tag v1.0 ec32d32 git push origin --tags Undo a local commit git reset --soft HEAD^ # use --soft if you want to keep your changes git reset --hard HEAD^ # use --hard if you don't care about keeping the changes you made Undo git add git reset filename.jsx Show differences after git pull git diff master@{1} master Lists branches merged into master git branch --merged master Lists branches merged into HEAD git branch --merged Lists branches that have not been merged git branch --no-merged Checkout previous branch git checkout - Diff between branches Diff between current branch and master: git diff master Diff between two branches: git diff master..staging Show only files that are different between the two branches git diff --name-status master..staging Create New Branch and Checkout \u2013 In One Command git checkout -b branch_name Revert Changes to File git checkout -- file LINUX Systems Directories / The root directory. /bin Contains binaries (programs) that must be present for the system to boot and run. /boot Contains Linux kernel, initial RAM disk image, and the boot loader. /dev This is a special directory which contains device nodes. /etc configuration files / shell scripts for system services at boot time. /home each user is given a directory in /home /lib Contains shared library files used by the core system /lost+found used in the case of a partial recovery from a file system corruption event /media mount points for removable media /mnt On older Linux systems, mount points for removable devices /opt to install \u201coptional\u201d software. /proc virtual file system maintained by the Linux kernel /root home directory for the root account. /sbin \u201csystem\u201d binaries. /tmp temporary files /usr all the programs and support files used by regular users. /usr/bin /usr/bin contains the executable programs installed by your Linux distribution /usr/lib shared libraries for the programs in /usr/bin. /usr/local programs that are not included with your distribution but are intended for systemwide use are installed. /usr/sbin system administration programs. /usr/share all the shared data used by programs in /usr/bin. /usr/share/doc packages documentation. /var where data that is likely to change is stored. /var/log log files Most used Commands ls Directory listing ls -al Formatted listing with hidden files ls -lt Sorting the Formatted listing by time modification cd dir Change directory to dir cd Change to home directory pwd Show current working directory mkdir dir Creating a directory dir cat file Places the standard input into the file more file Output the contents of the file head file Output the first 10 lines of the file tail file Output the last 10 lines of the file tail -f file Output the contents of file as it grows,starting with the last 10 lines touch file Create or update file rm file Deleting the file rm -r dir Deleting the directory rm -f file Force to remove the file rm -rf dir Force to remove the directory dir cp file1 file2 Copy the contents of file1 to file2 cp -r dir1 dir2 Copy dir1 to dir2;create dir2 if not present mv file1 file2 Rename or move file1 to file2,if file2 is an existing directory ln -s file link Create symbolic link link to file Process Management ps To display the currently working processes top Display all running process kill pid Kill the process with given pid killall proc Kill all the process named proc pkill pattern Will kill all processes matching the pattern bg List stopped or background jobs,resume a stopped job in the background fg Brings the most recent job to foreground fg n Brings job n to the foreground File permission chmod octal file Change the permission of file to octal,which can be found separately for user,group,world by adding, \u2022 4-read(r) \u2022 2-write(w) \u2022 1-execute(x) Find how many lines for file extension wc `find | grep jsx$` truncate file content truncate -s 0 dash.txt cat long file cat branch | more -d Check if port is listening sudo netstat -ntlp | grep :443 Find a string grep -r test - find string Find string include, exclude, ignore case grep -r -i .ui --include \\*.scss --exclude app.scss Find Large files find / -size +10M -ls Directory Size du -hs direcotryName Show system name and kernel uname -a Start a screen session. screen Resume a screen session. screen -r List screen sessions. screen -list List All Available Packages apt-cache pkgnames Package Name and Description of Software apt-cache search vsftpd Package Information apt-cache show netcat Dependencies for Specific Packages apt-cache showpkg vsftpd Update System Packages sudo apt-get update Clean up disks space sudo apt-get clean Download only source code sudo apt-get --download-only source vsftpd Check broken dependencies sudo apt-get check Remove files containing a string rm ?*foo?* ls -d '*foo*' | egrep -v '^foo|foo$' | xargs rm Create folder and cd into it mkdir foo cd $_ Create Swap file sudo mkdir -v /var/cache/swap cd /var/cache/swap sudo dd if=/dev/zero of=swapfile bs=1K count=8M sudo chmod 600 swapfile sudo mkswap swapfil sudo mkswap swapfile sudo swapon swapfile top -bn1 | grep -i swap echo /var/cache/swap/swapfile none swap sw 0 0 | sudo tee -a /etc/fstab WEBPACK webpack installation npm install --save-dev webpack If you're using webpack v4 or later, you'll need to install the CLI. npm install --save-dev webpack-cli Create a webpack config file e.g. webpack.config.js const path = require('path'); module.exports = { entry: './src/index.js', output: { filename: 'main.js', path: path.resolve(__dirname, 'dist') } }; in package.json scripts : { + build : webpack }, NODE/NPM version which node which npm node --version npm --version global install packages npm install uglify-js --global list global packages npm list --global npm list -g --depth=0 initialize project npm init local install packages devDependencies npm install should --save-dev local install packages dependencies npm install should --save uninstall packages npm uninstall underscore install specific version npm install underscore@1.8.2 check outdated packages npm outdated update packages npm update underscore Quick Project Setup - React, Webpack, Babel, ESLint Dependencies npm install --save react react-dom Dev Dependencies npm install --save-dev babel-{core,loader} babel-preset-es2015 babel-preset-react babel-eslint css-loader node-sass sass-loader style-loader file-loader webpack webpack-dev-server eslint eslint-plugin-import eslint-plugin-react eslint-watch NPM Scripts (package.json) scripts : { start : webpack-dev-server --progress --hot --inline , build : webpack , lint : esw webpack.config.js src , lint:watch : npm run lint -- --watch , fix : ./node_modules/.bin/eslint src --fix }, Babel (.babelrc) { presets : [ es2015 , react ] } Webpack Performance codesplitting react-loadable npm install --save react-loadable import Loadable from 'react-loadable'; import Loading from '../../layout/Loading'; const ComponentName = Loadable({ loader: () = import(/* webpackChunkName: ComponentName */'./subcomponents/ComponentName'), loading: Loading }); in webpack.config.js output: { path: path.join(__dirname, 'app/static/bin'), filename: 'bundle.js', publicPath: '/static/bin/', chunkFilename: '[name].bundle.js', }, general performance improvements React-loadable: this is a code splitting library. It allows to load components only when those are needed. There are 2 main ways to split code: by route by subcomponents Show loading icon when initial page is loading. The objective in this case is to give immediately a feedback to the user that page is loading. Webpack Plugin: UglifyWebpackPlugin minify js files (license MIT) uglifyjs-webpack-plugin Webpack Plugin: MomentLocalesPlugin remove unused locales from Moment (license MIT) moment-locales-webpack-plugin Webpack Plugin: BundleAnalyzerPlugin analyze build files (use http://127.0.0.1:8888 after running npm run-script build) (license MIT): Webpack Bundle Analyzer Babel Plugin: transform-imports import only needed modules (license ISC) babel-plugin-transform-imports Babel Plugin: transform-react-remove-prop-types Remove React propTypes from the production build, as they are only used in development. (license MIT) babel-plugin-transform-react-remove-prop-types webpack treeshaking npm run-script build -- --display-used-exports .babelrc transform imports npm install --save-dev babel-plugin-transform-imports in .babelrc { plugins : [ [ transform-imports , { react-bootstrap : { transform : react-bootstrap/lib/${member} , preventFullImport : true }, lodash : { transform : lodash/${member} , preventFullImport : true } }] ] } .eslintrc configuration module.exports = { parser : babel-eslint , extends : airbnb , env : { browser : true }, rules : { class-methods-use-this : off , react/sort-comp : off } }; Webpack (webpack.config.js) const path = require('path'); module.exports = { target: 'web', // Entry file where webpack starts the bundling process entry: path.resolve(__dirname, 'src/index.js'), // Location where bundled code will be saved output: { // Target directory for all output files path: path.resolve(__dirname, './dist'), // Name of each Output bundle file filename: bundle.js , }, // Webpack development server (config) devServer: { port: 9000, // Directory to serve content from contentBase: path.resolve(__dirname, './src'), // Automatically open browser when local server boots up open: true }, // Source Map setting devtool: inline-source-map , // Modules Loaders module: { rules: [ { test: /\\.js$/, loader: 'babel-loader', exclude: /node_modules/ }, { test: /\\.(jpe?g|png|gif)$/i, loader: 'file-loader', exclude: /node_modules/ }, { test: /(\\.css|\\.scss|\\.sass)$/, loaders: [ 'style-loader', 'css-loader', 'sass-loader' ] } ] } }; ESLint (.eslintrc.json) { root : true, extends : [ eslint:recommended , plugin:import/errors , plugin:import/warnings ], plugins : [ react ], parser : babel-eslint , parserOptions : { ecmaVersion : 7, sourceType : module , ecmaFeatures : { jsx : true } }, env : { es6 : true, browser : true, node : true, mocha : true }, rules : { quotes : 0, no-console : 1, no-debugger : 1, no-var : 1, semi : [1, always ], no-trailing-spaces : 1, eol-last : 0, no-unused-vars : 1, no-underscore-dangle : 0, no-alert : 0, no-lone-blocks : 0, no-multi-spaces : 1, jsx-quotes : 1, react/display-name : [ 1, { ignoreTranspilerName : false }], react/forbid-prop-types : [1, { forbid : [ any ]}], react/jsx-boolean-value : 1, react/jsx-closing-bracket-location : 1, react/jsx-curly-spacing : 1, } } Webpack setup2 -y takes the default npm init -y From root folder: mkdir dist cd dist touch index.html in dist/index.html !DOCTYPE html html head title The Minimal React Webpack Babel Setup /title /head body div id= app /div script src= ./bundle.js /script /body /html Install Webpack from root folder npm install --save-dev webpack webpack-dev-server webpack-cli Folder Structure - dist -- index.html - node_modules - package.json package.json scripts : { start : webpack-dev-server --config ./webpack.config.js --mode development , ... }, Create webpack configuration file touch webpack.config.js webpack config content module.exports = { entry: './src/index.js', output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, devServer: { contentBase: './dist' } }; Start Webpack dev server npm start BABEL Babel transpiles back to vanilla JavaScript so that every browser can interpret it. npm install --save-dev @babel/core @babel/preset-env hook it to webpack npm install --save-dev babel-loader JSX to javasript npm install --save-dev @babel/preset-react package.json keywords : [], author : , license : ISC , babel : { presets : [ @babel/preset-env , @babel/preset-react ] webpack.config.json module.exports = { entry: './src/index.js', module: { rules: [ { test: /\\.(js|jsx)$/, exclude: /node_modules/, use: ['babel-loader'] } ] }, resolve: { extensions: ['*', '.js', '.jsx'] }, output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, devServer: { contentBase: './dist' } }; Install packages for react npm install --save react react-dom src/index.js import React from 'react'; import ReactDOM from 'react-dom'; const title = 'My Minimal React Webpack Babel Setup'; ReactDOM.render( div {title} /div , document.getElementById('app') ); Hot Module Replacement in React apply changes to the browser npm install --save-dev react-hot-loader webpack.config.js const webpack = require('webpack'); module.exports = { entry: './src/index.js', module: { rules: [ { test: /\\.(js|jsx)$/, exclude: /node_modules/, use: ['babel-loader'] } ] }, resolve: { extensions: ['*', '.js', '.jsx'] }, output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, plugins: [ new webpack.HotModuleReplacementPlugin() ], devServer: { contentBase: './dist', hot: true } }; in src/index.js add at the end module.hot.accept(); npm start DOCKER Docker terminology - Images: The blueprints of our application which form the basis of containers. - Containers: Created from Docker images and run the actual application. - Docker Daemon: The background service running on the host that manages building, running and distributing Docker containers. - Docker Client: The command line tool that allows the user to interact with the daemon. - Docker Hub: A registry of Docker images. If required, one can host their own Docker registries and can use them for pulling images. Base images: are images that have no parent image, usually images with an OS like ubuntu, busybox or debian. Child images: are images that build on base images and add additional functionality. Official images: are images that are officially maintained and supported by the folks at Docker. These are typically one word long. User images: images created and shared by users. They build on base images and add additional functionality. Typically, these are formatted as user/image-name. Install latest Docker sudo apt-get install docker-ce Test your Docker installation by running the following docker run hello-world The pull command fetches image from the Docker registry and saves it to system. docker pull busybox Docker Hub Docker Images hub to see a list of all images on your system. docker images run a container docker run busybox docker run busybox echo hello from busybox show running containers docker ps show containers that ran previously docker ps -a live tty session docker run -it busybox sh Remove containers from which you left docker rm $(docker ps -a -q -f status=exited) OR docker container prune --rm flag can be passed to docker run which automatically deletes the container once it's exited from Run detached -d will detach our terminal -P will publish all exposed ports to random ports and finally --name corresponds to a name we want to give. docker run -d -P --name static-site name/static-site See the ports by running the docker port [CONTAINER] command docker port static-site Specify a custom port docker run -p 8888:80 prakhar1989/static-site Stop a container docker stop static-site Creating an image A Dockerfile is a simple text-file that contains a list of commands that the Docker client calls while creating an image. CMD is to tell the container which command it should run when it is started port number that needs to be exposed specifying our base image. Use the FROM keyword to do that Dockerfile FROM python:3-onbuild tell the port number the container should expose EXPOSE 5000 run the command CMD [ python , ./app.py ] Build image from Dockerfile docker build -t mz2kh/catnip . Run the container run -p 8888:5000 mz2kh/catnip Publish image to Docker HUB docker push mz2kh/catnip Now that your image is online, anyone who has docker installed can play with your app by typing just a single command. docker run -p 8888:5000 prakhar1989/catnip Search for images docker search elasticsearch When docker is installed, it creates three networks automatically. docker network ls NETWORK ID NAME DRIVER SCOPE 77192b388b9d bridge bridge local 3a125533ca3f host host local 13e644755906 none null local The bridge network is the network in which containers are run by default. Inspect bridge Network: docker network inspect bridge Create our own network A bridge network allows containers connected to the same bridge network to communicate, while providing isolation from containers which are not connected to that bridge network. docker network create catnip-net Launch containers into network (--net foodtrucks-net) $ docker run -d --name es --net foodtrucks-net -p 9200:9200 -p 9300:9300 -e discovery.type=single-node docker.elastic.co/elasticsearch/elasticsearch:6.3.2 13d6415f73c8d88bddb1f236f584b63dbaf2c3051f09863a3f1ba219edba3673 $ docker network inspect foodtrucks-net Create and run container on a created Network ./setup-docker.sh !/bin/bash build the flask container docker build -t prakhar1989/foodtrucks-web . create the network docker network create foodtrucks-net start the ES container docker run -d --name es --net foodtrucks-net -p 9200:9200 -p 9300:9300 -e discovery.type=single-node docker.elastic.co/elasticsearch/elasticsearch:6.3.2 start the flask app container docker run -d --net foodtrucks-net -p 5000:5000 --name foodtrucks-web prakhar1989/foodtrucks-web Docker Registries Repositories Searching an Image docker search nginx docker search --filter stars=3 --no-trunc nginx Pulling an Image docker image pull nginx docker image pull eon01/nginx localhost:5000/myadmin/nginx Pushing an Image docker image push eon01/nginx docker image push eon01/nginx localhost:5000/myadmin/nginx Running Containers Create and Run a Simple Container Start an ubuntu:latest image Bind the port 80 from the CONTAINER to port 3000 on the HOST Mount the current directory to /data on the CONTAINER docker container run --name infinite -it -p 3000:80 -v ${PWD}:/data ubuntu:latest Creating a Container docker container create -t -i eon01/infinite --name infinite Running a Container docker container run -it --name infinite -d eon01/infinite Renaming a Container docker container rename infinite infinity Removing a Container docker container rm infinite Updating a Container docker container update --cpu-shares 512 -m 300M infinite Starting Stopping Containers Starting docker container start nginx Stopping docker container stop nginx Restarting docker container restart nginx Pausing docker container pause nginx Unpausing docker container unpause nginx Blocking a Container docker container wait nginx Sending a SIGKILL docker container kill nginx Sending another signal docker container kill -s HUP nginx Connecting to an Existing Container docker container attach nginx Getting Information about Containers Running Containers docker container ls docker container ls -a Container Logs docker logs infinite Follow Container Logs docker container logs infinite -f Inspecting Containers docker container inspect infinite docker container inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q) Containers Events docker system events infinite Public Ports docker container port infinite Running Processes docker container top infinite Container Resource Usage docker container stats infinite Inspecting changes to files or directories on a container\u2019s filesystem docker container diff infinite Manipulating Images Listing Images docker image ls Building Images docker build . docker build github.com/creack/docker-firefox docker build - Dockerfile docker build - context.tar.gz docker build -t eon/infinite . docker build -f myOtherDockerfile . curl example.com/remote/Dockerfile | docker build -f - . Removing an Image docker image rm nginx Loading a Tarred Repository from a File or the Standard Input Stream docker image load ubuntu.tar.gz docker image load --input ubuntu.tar Save an Image to a Tar Archive docker image save busybox ubuntu.tar Showing the History of an Image docker image history Creating an Image From a Container docker container commit nginx Tagging an Image docker image tag nginx eon01/nginx Pushing an Image docker image push eon01/nginx Networking Creating Networks docker network create -d overlay MyOverlayNetwork docker network create -d bridge MyBridgeNetwork docker network create -d overlay \\ --subnet=192.168.0.0/16 \\ --subnet=192.170.0.0/16 \\ --gateway=192.168.0.100 \\ --gateway=192.170.0.100 \\ --ip-range=192.168.1.0/24 \\ --aux-address= my-router=192.168.1.5 --aux-address= my-switch=192.168.1.6 \\ --aux-address= my-printer=192.170.1.5 --aux-address= my-nas=192.170.1.6 \\ MyOverlayNetwork Removing a Network docker network rm MyOverlayNetwork Listing Networks docker network ls Getting Information About a Network docker network inspect MyOverlayNetwork Connecting a Running Container to a Network docker network connect MyOverlayNetwork nginx Connecting a Container to a Network When it Starts docker container run -it -d --network=MyOverlayNetwork nginx Disconnecting a Container from a Network docker network disconnect MyOverlayNetwork nginx Exposing Ports Using Dockerfile, you can expose a port on the container using: EXPOSE port_number You can also map the container port to a host port using: e.g. docker run -p $HOST_PORT:$CONTAINER_PORT --name infinite -t infinite Cleaning Docker Removing a Running Container docker container rm nginx Removing a Container and its Volume docker container rm -v nginx Removing all Exited Containers docker container rm $(docker container ls -a -f status=exited -q) Removing All Stopped Containers docker container rm `docker container ls -a -q` Removing a Docker Image docker image rm nginx Removing Dangling Images docker image rm $(docker image ls -f dangling=true -q) Removing all Images docker image rm $(docker image ls -a -q) Removing all untagged images docker image rm -f $(docker image ls | grep ^ none | awk {print $3} ) Stopping Removing all Containers docker container stop $(docker container ls -a -q) docker container rm $(docker container ls -a -q) Removing Dangling Volumes docker volume rm $(docker volume ls -f dangling=true -q) Removing all unused (containers, images, networks and volumes) docker system prune -f Clean all docker system prune -a LINKS React Awesome-react React Learning Roadmap FreeCodeCamp: React Cocepts Creativebloq: React Tips React Various articles Flavio Copes Articles about frontend Frontend Articles Frontend Articles Hooks collection 30 seconds react CSS Links CSSreference.io Jen Simmons CSS Lab BEM Block Element Modifier CSS Animation CSS grids Grids by example Grid CSS Garden Grid CSS Tricks Flexbox CSS Tricks Flexbox Grid GIT GIT commands Linux Linux commands Various links Github pages markdown Recording Screen Site Point Cheatsheets Github help REST API Design Rulebook Static site generator Awesome frontend Interview questions Deploy mkdocs to github Mock socket Mock socket Socket unit testing Socket+jest boilerplate","title":"TOOLS"},{"location":"#tools","text":"","title":"TOOLS"},{"location":"#git","text":"","title":"GIT"},{"location":"#linux","text":"Systems Directories / The root directory. /bin Contains binaries (programs) that must be present for the system to boot and run. /boot Contains Linux kernel, initial RAM disk image, and the boot loader. /dev This is a special directory which contains device nodes. /etc configuration files / shell scripts for system services at boot time. /home each user is given a directory in /home /lib Contains shared library files used by the core system /lost+found used in the case of a partial recovery from a file system corruption event /media mount points for removable media /mnt On older Linux systems, mount points for removable devices /opt to install \u201coptional\u201d software. /proc virtual file system maintained by the Linux kernel /root home directory for the root account. /sbin \u201csystem\u201d binaries. /tmp temporary files /usr all the programs and support files used by regular users. /usr/bin /usr/bin contains the executable programs installed by your Linux distribution /usr/lib shared libraries for the programs in /usr/bin. /usr/local programs that are not included with your distribution but are intended for systemwide use are installed. /usr/sbin system administration programs. /usr/share all the shared data used by programs in /usr/bin. /usr/share/doc packages documentation. /var where data that is likely to change is stored. /var/log log files Most used Commands ls Directory listing ls -al Formatted listing with hidden files ls -lt Sorting the Formatted listing by time modification cd dir Change directory to dir cd Change to home directory pwd Show current working directory mkdir dir Creating a directory dir cat file Places the standard input into the file more file Output the contents of the file head file Output the first 10 lines of the file tail file Output the last 10 lines of the file tail -f file Output the contents of file as it grows,starting with the last 10 lines touch file Create or update file rm file Deleting the file rm -r dir Deleting the directory rm -f file Force to remove the file rm -rf dir Force to remove the directory dir cp file1 file2 Copy the contents of file1 to file2 cp -r dir1 dir2 Copy dir1 to dir2;create dir2 if not present mv file1 file2 Rename or move file1 to file2,if file2 is an existing directory ln -s file link Create symbolic link link to file Process Management ps To display the currently working processes top Display all running process kill pid Kill the process with given pid killall proc Kill all the process named proc pkill pattern Will kill all processes matching the pattern bg List stopped or background jobs,resume a stopped job in the background fg Brings the most recent job to foreground fg n Brings job n to the foreground File permission chmod octal file Change the permission of file to octal,which can be found separately for user,group,world by adding, \u2022 4-read(r) \u2022 2-write(w) \u2022 1-execute(x) Find how many lines for file extension wc `find | grep jsx$` truncate file content truncate -s 0 dash.txt cat long file cat branch | more -d Check if port is listening sudo netstat -ntlp | grep :443 Find a string grep -r test - find string Find string include, exclude, ignore case grep -r -i .ui --include \\*.scss --exclude app.scss Find Large files find / -size +10M -ls Directory Size du -hs direcotryName Show system name and kernel uname -a Start a screen session. screen Resume a screen session. screen -r List screen sessions. screen -list List All Available Packages apt-cache pkgnames Package Name and Description of Software apt-cache search vsftpd Package Information apt-cache show netcat Dependencies for Specific Packages apt-cache showpkg vsftpd Update System Packages sudo apt-get update Clean up disks space sudo apt-get clean Download only source code sudo apt-get --download-only source vsftpd Check broken dependencies sudo apt-get check Remove files containing a string rm ?*foo?* ls -d '*foo*' | egrep -v '^foo|foo$' | xargs rm Create folder and cd into it mkdir foo cd $_ Create Swap file sudo mkdir -v /var/cache/swap cd /var/cache/swap sudo dd if=/dev/zero of=swapfile bs=1K count=8M sudo chmod 600 swapfile sudo mkswap swapfil sudo mkswap swapfile sudo swapon swapfile top -bn1 | grep -i swap echo /var/cache/swap/swapfile none swap sw 0 0 | sudo tee -a /etc/fstab","title":"LINUX"},{"location":"#webpack","text":"webpack installation npm install --save-dev webpack If you're using webpack v4 or later, you'll need to install the CLI. npm install --save-dev webpack-cli Create a webpack config file e.g. webpack.config.js const path = require('path'); module.exports = { entry: './src/index.js', output: { filename: 'main.js', path: path.resolve(__dirname, 'dist') } }; in package.json scripts : { + build : webpack },","title":"WEBPACK"},{"location":"#nodenpm","text":"version which node which npm node --version npm --version global install packages npm install uglify-js --global list global packages npm list --global npm list -g --depth=0 initialize project npm init local install packages devDependencies npm install should --save-dev local install packages dependencies npm install should --save uninstall packages npm uninstall underscore install specific version npm install underscore@1.8.2 check outdated packages npm outdated update packages npm update underscore Quick Project Setup - React, Webpack, Babel, ESLint Dependencies npm install --save react react-dom Dev Dependencies npm install --save-dev babel-{core,loader} babel-preset-es2015 babel-preset-react babel-eslint css-loader node-sass sass-loader style-loader file-loader webpack webpack-dev-server eslint eslint-plugin-import eslint-plugin-react eslint-watch NPM Scripts (package.json) scripts : { start : webpack-dev-server --progress --hot --inline , build : webpack , lint : esw webpack.config.js src , lint:watch : npm run lint -- --watch , fix : ./node_modules/.bin/eslint src --fix }, Babel (.babelrc) { presets : [ es2015 , react ] } Webpack Performance codesplitting react-loadable npm install --save react-loadable import Loadable from 'react-loadable'; import Loading from '../../layout/Loading'; const ComponentName = Loadable({ loader: () = import(/* webpackChunkName: ComponentName */'./subcomponents/ComponentName'), loading: Loading }); in webpack.config.js output: { path: path.join(__dirname, 'app/static/bin'), filename: 'bundle.js', publicPath: '/static/bin/', chunkFilename: '[name].bundle.js', }, general performance improvements React-loadable: this is a code splitting library. It allows to load components only when those are needed. There are 2 main ways to split code: by route by subcomponents Show loading icon when initial page is loading. The objective in this case is to give immediately a feedback to the user that page is loading. Webpack Plugin: UglifyWebpackPlugin minify js files (license MIT) uglifyjs-webpack-plugin Webpack Plugin: MomentLocalesPlugin remove unused locales from Moment (license MIT) moment-locales-webpack-plugin Webpack Plugin: BundleAnalyzerPlugin analyze build files (use http://127.0.0.1:8888 after running npm run-script build) (license MIT): Webpack Bundle Analyzer Babel Plugin: transform-imports import only needed modules (license ISC) babel-plugin-transform-imports Babel Plugin: transform-react-remove-prop-types Remove React propTypes from the production build, as they are only used in development. (license MIT) babel-plugin-transform-react-remove-prop-types webpack treeshaking npm run-script build -- --display-used-exports .babelrc transform imports npm install --save-dev babel-plugin-transform-imports in .babelrc { plugins : [ [ transform-imports , { react-bootstrap : { transform : react-bootstrap/lib/${member} , preventFullImport : true }, lodash : { transform : lodash/${member} , preventFullImport : true } }] ] } .eslintrc configuration module.exports = { parser : babel-eslint , extends : airbnb , env : { browser : true }, rules : { class-methods-use-this : off , react/sort-comp : off } }; Webpack (webpack.config.js) const path = require('path'); module.exports = { target: 'web', // Entry file where webpack starts the bundling process entry: path.resolve(__dirname, 'src/index.js'), // Location where bundled code will be saved output: { // Target directory for all output files path: path.resolve(__dirname, './dist'), // Name of each Output bundle file filename: bundle.js , }, // Webpack development server (config) devServer: { port: 9000, // Directory to serve content from contentBase: path.resolve(__dirname, './src'), // Automatically open browser when local server boots up open: true }, // Source Map setting devtool: inline-source-map , // Modules Loaders module: { rules: [ { test: /\\.js$/, loader: 'babel-loader', exclude: /node_modules/ }, { test: /\\.(jpe?g|png|gif)$/i, loader: 'file-loader', exclude: /node_modules/ }, { test: /(\\.css|\\.scss|\\.sass)$/, loaders: [ 'style-loader', 'css-loader', 'sass-loader' ] } ] } }; ESLint (.eslintrc.json) { root : true, extends : [ eslint:recommended , plugin:import/errors , plugin:import/warnings ], plugins : [ react ], parser : babel-eslint , parserOptions : { ecmaVersion : 7, sourceType : module , ecmaFeatures : { jsx : true } }, env : { es6 : true, browser : true, node : true, mocha : true }, rules : { quotes : 0, no-console : 1, no-debugger : 1, no-var : 1, semi : [1, always ], no-trailing-spaces : 1, eol-last : 0, no-unused-vars : 1, no-underscore-dangle : 0, no-alert : 0, no-lone-blocks : 0, no-multi-spaces : 1, jsx-quotes : 1, react/display-name : [ 1, { ignoreTranspilerName : false }], react/forbid-prop-types : [1, { forbid : [ any ]}], react/jsx-boolean-value : 1, react/jsx-closing-bracket-location : 1, react/jsx-curly-spacing : 1, } } Webpack setup2 -y takes the default npm init -y From root folder: mkdir dist cd dist touch index.html in dist/index.html !DOCTYPE html html head title The Minimal React Webpack Babel Setup /title /head body div id= app /div script src= ./bundle.js /script /body /html Install Webpack from root folder npm install --save-dev webpack webpack-dev-server webpack-cli Folder Structure - dist -- index.html - node_modules - package.json package.json scripts : { start : webpack-dev-server --config ./webpack.config.js --mode development , ... }, Create webpack configuration file touch webpack.config.js webpack config content module.exports = { entry: './src/index.js', output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, devServer: { contentBase: './dist' } }; Start Webpack dev server npm start","title":"NODE/NPM"},{"location":"#babel","text":"Babel transpiles back to vanilla JavaScript so that every browser can interpret it. npm install --save-dev @babel/core @babel/preset-env hook it to webpack npm install --save-dev babel-loader JSX to javasript npm install --save-dev @babel/preset-react package.json keywords : [], author : , license : ISC , babel : { presets : [ @babel/preset-env , @babel/preset-react ] webpack.config.json module.exports = { entry: './src/index.js', module: { rules: [ { test: /\\.(js|jsx)$/, exclude: /node_modules/, use: ['babel-loader'] } ] }, resolve: { extensions: ['*', '.js', '.jsx'] }, output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, devServer: { contentBase: './dist' } }; Install packages for react npm install --save react react-dom src/index.js import React from 'react'; import ReactDOM from 'react-dom'; const title = 'My Minimal React Webpack Babel Setup'; ReactDOM.render( div {title} /div , document.getElementById('app') ); Hot Module Replacement in React apply changes to the browser npm install --save-dev react-hot-loader webpack.config.js const webpack = require('webpack'); module.exports = { entry: './src/index.js', module: { rules: [ { test: /\\.(js|jsx)$/, exclude: /node_modules/, use: ['babel-loader'] } ] }, resolve: { extensions: ['*', '.js', '.jsx'] }, output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, plugins: [ new webpack.HotModuleReplacementPlugin() ], devServer: { contentBase: './dist', hot: true } }; in src/index.js add at the end module.hot.accept(); npm start","title":"BABEL"},{"location":"#docker","text":"Docker terminology - Images: The blueprints of our application which form the basis of containers. - Containers: Created from Docker images and run the actual application. - Docker Daemon: The background service running on the host that manages building, running and distributing Docker containers. - Docker Client: The command line tool that allows the user to interact with the daemon. - Docker Hub: A registry of Docker images. If required, one can host their own Docker registries and can use them for pulling images. Base images: are images that have no parent image, usually images with an OS like ubuntu, busybox or debian. Child images: are images that build on base images and add additional functionality. Official images: are images that are officially maintained and supported by the folks at Docker. These are typically one word long. User images: images created and shared by users. They build on base images and add additional functionality. Typically, these are formatted as user/image-name. Install latest Docker sudo apt-get install docker-ce Test your Docker installation by running the following docker run hello-world The pull command fetches image from the Docker registry and saves it to system. docker pull busybox Docker Hub Docker Images hub to see a list of all images on your system. docker images run a container docker run busybox docker run busybox echo hello from busybox show running containers docker ps show containers that ran previously docker ps -a live tty session docker run -it busybox sh Remove containers from which you left docker rm $(docker ps -a -q -f status=exited) OR docker container prune --rm flag can be passed to docker run which automatically deletes the container once it's exited from Run detached -d will detach our terminal -P will publish all exposed ports to random ports and finally --name corresponds to a name we want to give. docker run -d -P --name static-site name/static-site See the ports by running the docker port [CONTAINER] command docker port static-site Specify a custom port docker run -p 8888:80 prakhar1989/static-site Stop a container docker stop static-site Creating an image A Dockerfile is a simple text-file that contains a list of commands that the Docker client calls while creating an image. CMD is to tell the container which command it should run when it is started port number that needs to be exposed specifying our base image. Use the FROM keyword to do that Dockerfile FROM python:3-onbuild tell the port number the container should expose EXPOSE 5000 run the command CMD [ python , ./app.py ] Build image from Dockerfile docker build -t mz2kh/catnip . Run the container run -p 8888:5000 mz2kh/catnip Publish image to Docker HUB docker push mz2kh/catnip Now that your image is online, anyone who has docker installed can play with your app by typing just a single command. docker run -p 8888:5000 prakhar1989/catnip Search for images docker search elasticsearch When docker is installed, it creates three networks automatically. docker network ls NETWORK ID NAME DRIVER SCOPE 77192b388b9d bridge bridge local 3a125533ca3f host host local 13e644755906 none null local The bridge network is the network in which containers are run by default. Inspect bridge Network: docker network inspect bridge Create our own network A bridge network allows containers connected to the same bridge network to communicate, while providing isolation from containers which are not connected to that bridge network. docker network create catnip-net Launch containers into network (--net foodtrucks-net) $ docker run -d --name es --net foodtrucks-net -p 9200:9200 -p 9300:9300 -e discovery.type=single-node docker.elastic.co/elasticsearch/elasticsearch:6.3.2 13d6415f73c8d88bddb1f236f584b63dbaf2c3051f09863a3f1ba219edba3673 $ docker network inspect foodtrucks-net Create and run container on a created Network ./setup-docker.sh !/bin/bash build the flask container docker build -t prakhar1989/foodtrucks-web . create the network docker network create foodtrucks-net start the ES container docker run -d --name es --net foodtrucks-net -p 9200:9200 -p 9300:9300 -e discovery.type=single-node docker.elastic.co/elasticsearch/elasticsearch:6.3.2 start the flask app container docker run -d --net foodtrucks-net -p 5000:5000 --name foodtrucks-web prakhar1989/foodtrucks-web Docker Registries Repositories Searching an Image docker search nginx docker search --filter stars=3 --no-trunc nginx Pulling an Image docker image pull nginx docker image pull eon01/nginx localhost:5000/myadmin/nginx Pushing an Image docker image push eon01/nginx docker image push eon01/nginx localhost:5000/myadmin/nginx Running Containers Create and Run a Simple Container Start an ubuntu:latest image Bind the port 80 from the CONTAINER to port 3000 on the HOST Mount the current directory to /data on the CONTAINER docker container run --name infinite -it -p 3000:80 -v ${PWD}:/data ubuntu:latest Creating a Container docker container create -t -i eon01/infinite --name infinite Running a Container docker container run -it --name infinite -d eon01/infinite Renaming a Container docker container rename infinite infinity Removing a Container docker container rm infinite Updating a Container docker container update --cpu-shares 512 -m 300M infinite Starting Stopping Containers Starting docker container start nginx Stopping docker container stop nginx Restarting docker container restart nginx Pausing docker container pause nginx Unpausing docker container unpause nginx Blocking a Container docker container wait nginx Sending a SIGKILL docker container kill nginx Sending another signal docker container kill -s HUP nginx Connecting to an Existing Container docker container attach nginx Getting Information about Containers Running Containers docker container ls docker container ls -a Container Logs docker logs infinite Follow Container Logs docker container logs infinite -f Inspecting Containers docker container inspect infinite docker container inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q) Containers Events docker system events infinite Public Ports docker container port infinite Running Processes docker container top infinite Container Resource Usage docker container stats infinite Inspecting changes to files or directories on a container\u2019s filesystem docker container diff infinite Manipulating Images Listing Images docker image ls Building Images docker build . docker build github.com/creack/docker-firefox docker build - Dockerfile docker build - context.tar.gz docker build -t eon/infinite . docker build -f myOtherDockerfile . curl example.com/remote/Dockerfile | docker build -f - . Removing an Image docker image rm nginx Loading a Tarred Repository from a File or the Standard Input Stream docker image load ubuntu.tar.gz docker image load --input ubuntu.tar Save an Image to a Tar Archive docker image save busybox ubuntu.tar Showing the History of an Image docker image history Creating an Image From a Container docker container commit nginx Tagging an Image docker image tag nginx eon01/nginx Pushing an Image docker image push eon01/nginx Networking Creating Networks docker network create -d overlay MyOverlayNetwork docker network create -d bridge MyBridgeNetwork docker network create -d overlay \\ --subnet=192.168.0.0/16 \\ --subnet=192.170.0.0/16 \\ --gateway=192.168.0.100 \\ --gateway=192.170.0.100 \\ --ip-range=192.168.1.0/24 \\ --aux-address= my-router=192.168.1.5 --aux-address= my-switch=192.168.1.6 \\ --aux-address= my-printer=192.170.1.5 --aux-address= my-nas=192.170.1.6 \\ MyOverlayNetwork Removing a Network docker network rm MyOverlayNetwork Listing Networks docker network ls Getting Information About a Network docker network inspect MyOverlayNetwork Connecting a Running Container to a Network docker network connect MyOverlayNetwork nginx Connecting a Container to a Network When it Starts docker container run -it -d --network=MyOverlayNetwork nginx Disconnecting a Container from a Network docker network disconnect MyOverlayNetwork nginx Exposing Ports Using Dockerfile, you can expose a port on the container using: EXPOSE port_number You can also map the container port to a host port using: e.g. docker run -p $HOST_PORT:$CONTAINER_PORT --name infinite -t infinite Cleaning Docker Removing a Running Container docker container rm nginx Removing a Container and its Volume docker container rm -v nginx Removing all Exited Containers docker container rm $(docker container ls -a -f status=exited -q) Removing All Stopped Containers docker container rm `docker container ls -a -q` Removing a Docker Image docker image rm nginx Removing Dangling Images docker image rm $(docker image ls -f dangling=true -q) Removing all Images docker image rm $(docker image ls -a -q) Removing all untagged images docker image rm -f $(docker image ls | grep ^ none | awk {print $3} ) Stopping Removing all Containers docker container stop $(docker container ls -a -q) docker container rm $(docker container ls -a -q) Removing Dangling Volumes docker volume rm $(docker volume ls -f dangling=true -q) Removing all unused (containers, images, networks and volumes) docker system prune -f Clean all docker system prune -a","title":"DOCKER"},{"location":"#links","text":"React Awesome-react React Learning Roadmap FreeCodeCamp: React Cocepts Creativebloq: React Tips React Various articles Flavio Copes Articles about frontend Frontend Articles Frontend Articles Hooks collection 30 seconds react CSS Links CSSreference.io Jen Simmons CSS Lab BEM Block Element Modifier CSS Animation CSS grids Grids by example Grid CSS Garden Grid CSS Tricks Flexbox CSS Tricks Flexbox Grid GIT GIT commands Linux Linux commands Various links Github pages markdown Recording Screen Site Point Cheatsheets Github help REST API Design Rulebook Static site generator Awesome frontend Interview questions Deploy mkdocs to github Mock socket Mock socket Socket unit testing Socket+jest boilerplate","title":"LINKS"},{"location":"backend/","text":"BACKEND PYTHON Byte code compilation Internally, Python compiles sourcecode into a format called bytecode. Compilation is simply a translation step, and byte code is a lower-level, and platform-independent,representation of your source code. This byte code translation is performed to speed execution. byte code it is executed to something called PythonVirtual Machine. PVM iterates through bytecode. It is the runtime engine of Python; it\u2019s always present as part of thePython system, and is the component that truly runs your scripts. Technically, it\u2019s just the last step of what is called the Python interpreter. Built-in datatypes Numbers Strings Lists and Dictionaries Tuples, Files... Strings String Methods capitalize() - Returns the string with first letter capitalized and the rest lowercased. casefold() - Returns a lowercase string, generally used for caseless matching. This is more aggressive than the lower() method. center() - Center the string within the specified width with optional fill character. count() - Count the non-overlapping occurrence of supplied substring in the string. encode() - Return the encoded version of the string as a bytes object. endswith() - Returns ture if the string ends with the supplied substring. expandtabs() - Return a string where all the tab characters are replaced by the supplied number of spaces. find() - Return the index of the first occurrence of supplied substring in the string. Return -1 if not found. format() - Format the given string. format_map() - Format the given string. index() - Return the index of the first occurrence of supplied substring in the string. Raise ValueError if not found. isalnum() - Return true if the string is non-empty and all characters are alphanumeric. isalpha() - Return true if the string is non-empty and all characters are alphabetic. isdecimal() - Return true if the string is non-empty and all characters are decimal characters. isdigit() - Return true if the string is non-empty and all characters are digits. isidentifier() - Return true if the string is a valid identifier. islower() - Return true if the string has all lowercased characters and at least one is cased character. isnumeric() - Return true if the string is non-empty and all characters are numeric. isprintable() - Return true if the string is empty or all characters are printable. isspace() - Return true if the string is non-empty and all characters are whitespaces. istitle() - Return true if the string is non-empty and titlecased. isupper() - Return true if the string has all uppercased characters and at least one is cased character. join() - Concatenate strings in the provided iterable with separator between them being the string providing this method. ljust() - Left justify the string in the provided width with optional fill characters. lower() - Return a copy of all lowercased string. lstrip() - Return a string with provided leading characters removed. maketrans() - Return a translation table. partition() - Partition the string at first occurrence of substring (separator) and return a 3-tuple with part before separator, the separator and part after separator. replace() - Replace all old substrings with new substrings. rfind() - Return the index of the last occurrence of supplied substring in the string. Return -1 if not found. rindex() - Return the index of the last occurrence of supplied substring in the string. Raise ValueError if not found. rjust() - Right justify the string in the provided width with optional fill characters. rpartition() - Partition the string at last occurrence of substring (separator) and return a 3-tuple with part before separator, the separator and part after separator. rsplit() - Return a list of words delimited by the provided subtring. If maximum number of split is specified, it is done from the right. rstrip() - Return a string with provided trailing characters removed. split() - Return a list of words delimited by the provided subtring. If maximum number of split is specified, it is done from the left. splitlines() - Return a list of lines in the string. startswith() - Return true if the string starts with the provided substring. strip() - Return a string with provided leading and trailing characters removed. swapcase() - Return a string with lowercase characters converted to uppercase and vice versa. title() - Return a title (first character of each word capitalized, others lowercased) cased string. translate() - Return a copy of string that has been mapped according to the provided map. upper() - Return a copy of all uppercased string. zfill() - Return a numeric string left filled with zeros in the provided width. Lists List methods append() - Add an element to the end of the list extend() - Add all elements of a list to the another list insert() - Insert an item at the defined index remove() - Removes an item from the list pop() - Removes and returns an element at the given index clear() - Removes all items from the list index() - Returns the index of the first matched item count() - Returns the count of number of items passed as an argument sort() - Sort items in a list in ascending order reverse() - Reverse the order of items in the list copy() - Returns a shallow copy of the list List comprehension pow2 = [2 ** x for x in range(10)] # Output: [1, 2, 4, 8, 16, 32, 64, 128, 256, 512] print(pow2) # Equivalent to pow2 = [] for x in range(10): pow2.append(2 ** x) built-in functions list all() Return True if all elements of the list are true (or if the list is empty). any() Return True if any element of the list is true. If the list is empty, return False. enumerate() Return an enumerate object. It contains the index and value of all the items of list as a tuple. len() Return the length (the number of items) in the list. list() Convert an iterable (tuple, string, set, dictionary) to a list. max() Return the largest item in the list. min() Return the smallest item in the list sorted() Return a new sorted list (does not sort the list itself). sum() Return the sum of all elements in the list. Tuples The difference between the two is that we cannot change the elements of a tuple once it is assigned # tuple having integers # Output: (1, 2, 3) my_tuple = (1, 2, 3) print(my_tuple) Dictionaries Python dictionary is an unordered collection of items. While other compound data types have only value as an element, a dictionary has a key: value pair. # empty dictionary my_dict = {} # dictionary with integer keys my_dict = {1: 'apple', 2: 'ball'} # dictionary with mixed keys my_dict = {'name': 'John', 1: [2, 4, 3]} # using dict() my_dict = dict({1:'apple', 2:'ball'}) # from sequence having each item as a pair my_dict = dict([(1,'apple'), (2,'ball')]) Access elements from a dictionary my_dict = {'name':'Jack', 'age': 26} # Output: Jack print(my_dict['name']) # Output: 26 print(my_dict.get('age')) Update/Add my_dict = {'name':'Jack', 'age': 26} # update value my_dict['age'] = 27 #Output: {'age': 27, 'name': 'Jack'} print(my_dict) # add item my_dict['address'] = 'Downtown' # Output: {'address': 'Downtown', 'age': 27, 'name': 'Jack'} print(my_dict) Delete/Removes # create a dictionary squares = {1:1, 2:4, 3:9, 4:16, 5:25} # remove a particular item # Output: 16 print(squares.pop(4)) # Output: {1: 1, 2: 4, 3: 9, 5: 25} print(squares) # remove an arbitrary item # Output: (1, 1) print(squares.popitem()) # Output: {2: 4, 3: 9, 5: 25} print(squares) # delete a particular item del squares[5] # Output: {2: 4, 3: 9} print(squares) # remove all items squares.clear() # Output: {} print(squares) # delete the dictionary itself del squares # Throws Error # print(squares) Dictionaries methods clear() Remove all items form the dictionary. copy() Return a shallow copy of the dictionary. fromkeys(seq[, v]) Return a new dictionary with keys from seq and value equal to v (defaults to None). get(key[,d]) Return the value of key. If key doesnot exit, return d (defaults to None). items() Return a new view of the dictionary's items (key, value). keys() Return a new view of the dictionary's keys. pop(key[,d]) Remove the item with key and return its value or d if key is not found. If d is not provided and key is not found, raises KeyError. popitem() Remove and return an arbitary item (key, value). Raises KeyError if the dictionary is empty. setdefault(key[,d]) If key is in the dictionary, return its value. If not, insert key with a value of d and return d (defaults to None). update([other]) Update the dictionary with the key/value pairs from other, overwriting existing keys. values() Return a new view of the dictionary's values Sets A set is an unordered collection of items. Every element is unique (no duplicates) and must be immutable (which cannot be changed). However, the set itself is mutable. We can add or remove items from it. # initialize my_set my_set = {1, 3, 4, 5, 6} print(my_set) sets methods add() Adds an element to the set clear() Removes all elements from the set copy() Returns a copy of the set difference() Returns the difference of two or more sets as a new set difference_update() Removes all elements of another set from this set discard() Removes an element from the set if it is a member. (Do nothing if the element is not in set) intersection() Returns the intersection of two sets as a new set intersection_update() Updates the set with the intersection of itself and another isdisjoint() Returns True if two sets have a null intersection issubset() Returns True if another set contains this set issuperset() Returns True if this set contains another set pop() Removes and returns an arbitary set element. Raise KeyError if the set is empty remove() Removes an element from the set. If the element is not a member, raise a KeyError symmetric_difference() Returns the symmetric difference of two sets as a new set symmetric_difference_update() Updates a set with the symmetric difference of itself and another union() Returns the union of sets in a new set update() Updates the set with the union of itself and others Get minimum/max/sort value from a dictionary prices = { 'shows': 41, 'tshirts': 55, 'gloves': 22, 'hats': 11 } min_price = min(zip(prices.values(), prices.keys())) max_price = max(zip(prices.values(), prices.keys())) prices_sorted = sorted(zip(prices.values(), prices.keys())) Given two dictionaries # Find keys in common a.keys() b.keys() # Find keys in a that are not in b a.keys() - b.keys() # Find (key,value) pairs in common a.items() b.items() # Make a new dictionary with certain keys removed c = {key:a[key] for key in a.keys() - {'z', 'w'}} # Make a dictionary of all prices over 200 p1 = { key:value for key, value in prices.items() if value 200 } # Make a dictionary of tech stocks tech_names = { 'AA', 'BB', 'CC', 'DD' } p2 = { key:value for key,value in prices.items() if key in tech_names } https://d.cxcore.net/Python/Python_Cookbook_3rd_Edition.pdf NODE About Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications. Features of Node.js Asynchronous and Event Driven Fast: based on Google Chrome's V8 JavaScript Engine Single Threaded but scalable: Event mechanism helps the server to respond in a non-blocking way No buffering Node components A Node.js application consists of the following three components: - Import required modules: Use the require directive to load Node.js modules. - Create server: A server which will listen to client's requests similar to Apache HTTP Server. - Read request and return response: Read the HTTP request made by the client which can be a browser or a console and return the response. Node application 'Hello World' Import required module: var http = require( http ); Create Server main.js http.createServer(function (request, response) { // Send the HTTP header // HTTP Status: 200 : OK // Content Type: text/plain response.writeHead(200, {'Content-Type': 'text/plain'}); // Send the response body response.end('Hello World\\n'); }).listen(8081); // Console print the message console.log('Server running at http://127.0.0.1:8081/'); Run it node main.js REPL stands for Read Eval Print Loop REPL stands for Read Eval Print Loop. it represents a computer environment like a Windows console or Unix/Linux shell where a command is entered and the system responds with an output in an interactive mode. REPL can be started by simply running node on shell/console. NPM node package manager Online repositories for node.js Command line utility to install Node.js packages Install Modules using npm npm install Module Name install express npm install express use it as follow: var express = require('express'); other commands npm uninstall express npm update express npm search express Callback function A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All the APIs of Node are written in such a way that they support callbacks. var fs = require( fs ); fs.readFile('input.txt', function (err, data) { if (err) return console.error(err); console.log(data.toString()); }); console.log( Program Ended );","title":"BACKEND"},{"location":"backend/#backend","text":"","title":"BACKEND"},{"location":"backend/#python","text":"","title":"PYTHON"},{"location":"backend/#node","text":"","title":"NODE"},{"location":"frontend/","text":"FRONTEND JAVASCRIPT Execution Context the environment in which code is running. It is created when your code is executed. Global Execution Context creates - Global Object Window (browser) - Special Object 'this' - Ref to outer environment JS Engine it performs following two steps while executing any code: Creation Phase - Run through your code identifies variables functions - Setup memory space for Variables Functions - \"Hoisting\" - Hoisting, before code is executed, the JS Engine set asides memory space for Var Func used inside the code. Execution Phase - When the code is executed line-by-line (by JS interpreeter) it can access the variables defined inside Execution Context - Variable assignment are done in this phase Bind We use the Bind () method primarily to call a function with the this value set explicitly. In other words, bind () allows us to easily set which specific object will be bound to this when a function or method is invoked. // button Get Random Person /button // input type= text var user = { data :[ {name: T. Woods , age:37}, {name: P. Mickelson , age:43} ], clickHandler:function (event) { var randomNum = ((Math.random () * 2 | 0) + 1) - 1; // random number between 0 and 1 $ ( input ).val (this.data[randomNum].name + + this.data[randomNum].age); } } // Assign an eventHandler to the button's click event $ ( button ).click (user.clickHandler); Scopes in javascript Global Scope Local Scope Block Scope (let) Old school JavaScript Traditionally, JavaScript really only has two types of scope : Global Scope Variables are known throughout the application, from the start of the application Functional Scope Variables are known within the function they are declared in, from the start of the function Modern JavaScript The most recent JavaScript specs now also allow a third scope : Block Scope Variables are known within the block they are declared in, from the moment they are declared onwards let myVariable = \"Some text\"; const myVar = \"val\"; Difference Between Function and Block Scope Function scope is within the function. (var is function scope.) Block scope is within curly brackets. (let and const are block scope.) Variable hoisting Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function). Scope chain JavaScript engine will try to find the value of the variable in the executing code's block scope (your room) and when unable to find the value there, it will go to its lexical outer scope (your house) and if not even found there, it will go to it\u2019s outer scope\u2019s outer scope(your colony) until it reaches the global scope, let\u2019s say in your case can be the country, which in context of JavaScript will be window, if your working in browser environment. Closures A closure is an inner function that has access to the outer (enclosing) function\u2019s variables\u200a\u2014\u200ascope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function\u2019s variables, and it has access to the global variables. Promise A promise is commonly defined as a proxy for a value that will eventually become available. Promises are one way to deal with asynchronous code, without writing too many callbacks in your code. Although they\u2019ve been around for years, they were standardized and introduced in ES2015, and now they have been superseded in ES2017 by async functions. Async functions use the promises API as their building block, so understanding them is fundamental even if in newer code you\u2019ll likely use async functions instead of promises. A Promise is in one of these states: pending: initial state, neither fulfilled nor rejected. fulfilled: meaning that the operation completed successfully. rejected: meaning that the operation failed. A Promise object is created using the new keyword and its constructor. This constructor takes as its argument a function, called the \"executor function\". This function should take two functions as parameters. The first (resolve) is called when the asynchronous task completes successfully and returns the results of the task as a value. The second (reject) is called when the task fails, and returns the reason for failure, which is typically an error object. Promise example 1 get('supplyData.json').then(function(response) { console.log( Success! , response); }).catch(function(error) { console.log( Failed! , error); }) Promise example 2 var promise1 = new Promise(function(resolve, reject) { setTimeout(function() { resolve('foo'); }, 300); }); promise1.then(function(value) { console.log(value); // expected output: foo }); console.log(promise1); // expected output: [object Promise] Promise example 3 function myAsyncFunction(url) { return new Promise((resolve, reject) = { const xhr = new XMLHttpRequest(); xhr.open( GET , url); xhr.onload = () = resolve(xhr.responseText); xhr.onerror = () = reject(xhr.statusText); xhr.send(); }); } Callback You can\u2019t know when a user is going to click a button, so what you do is, you define an event handler for the click event. This event handler accepts a function, which will be called when the event is triggered. This is the so-called callback. A callback is a simple function that\u2019s passed as a value to another function, and will only be executed when the event happens. Callback example 1 document.getElementById('button').addEventListener('click', () = { //item clicked }) Callback example 2 setTimeout(() = { // runs after 2 seconds }, 2000) Promises vs Callbacks Random number Math.floor(Math.random() * (100 - 1 + 1)) + 1; graphData = graphData.map((graph) = { graph.read_bytes = Math.floor(Math.random() * (10000 - 1024 + 1)) + 1024; return graph; }); ES6 Spread Operator 1 const userInfo = { isAuthenticated: false } const action = { isAuthenticated: true, type: 'nope' } const res = { ...userInfo, isAuthenticated: action.isAuthenticated }; console.log(res); // { isAuthenticated: true } Spread Operator 2 var mid = [3, 4]; var arr = [1, 2, ...mid, 5, 6]; console.log(arr); // [ 1, 2, 3, 4, 5, 6 ] Spread Operator 3 let nums = [1, 2, 3]; let abcs = ['a', 'b', 'c']; let alphanum = [ ...nums, ...abs ]; // [1, 2, 3, 'a', 'b', 'c'] Destructuring 1 var address = { city: London , state: UK , zip: 1334 }; let {city, state, zip} = address; log(city); // 'London' log(state); // 'UK' log(zip); // 1334 Destructuring 2 var address = { city: London , state: UK , zip: 1334 }; let {city: c, state: s, zip: z} = address; log(c, s, z); // 'London UK 1334' Destructuring 3 var person = {name: 'Aaaaaa', age: 35}; displayPerson(person); function displayPerson({name, age}) { // do something with name and age to display them } Destructuring 4 var person = {name: 'Aaaaaa', age: 35}; let {name, age, address} = person; // error! let {name, age, ?address} = person; // OK let ?{name, age, address} = person; // OK Destructuring 5 var nums = [1, 2, 3, 4]; doSomething(nums); function doSomething([first, second, ...others]){ log(first); //logs 1 log(second); //logs 2 log(others); //logs [3, 4] } Arrow functions 1 Specifying parameters: () = { ... } // no parameter x = { ... } // one parameter, an identifier (x, y) = { ... } // several parameters Specifying a body: x = { return x * x } // block x = x * x // expression, equivalent to previous line Arrow function 2 const phraseSplitterEs6 = phrase = phrase.split( ); Arrow function 3 var docLogEs6 = () = { console.log(document); }; Arrow function 4 const smartPhones = [ { name:'iphone', price:649 }, { name:'Galaxy S6', price:576 }, { name:'Galaxy Note 5', price:489 } ]; // ES6 const prices = smartPhones.map(smartPhone = smartPhone.price); console.log(prices); // [649, 576, 489] REACT State React is all about one-way data flow down the component hierarchy. State is created in the component and stays in the component. It can be passed to a children as its props. Basic Concepts - JSX - Rendering Elements - Components Functional/Container - State and Lifecycle - Handling Events - Conditional Rendering - Lists and Keys - Forms JSX MyComponent message={'hello world'} / Rendering elements class TodoList extends React.Component { render() { return ( ul {this.props.items.map(item = ( li key={item.id} {item.text} /li ))} /ul ); } } Stateless function component - sfc const | = props = { return ( | ); }; export default |; State and lifecycle Mounting These methods are called in the following order: constructor() static getDerivedStateFromProps() render() componentDidMount() Updating An update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered: static getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate() Unmounting This method is called when a component is being removed from the DOM: componentWillUnmount() Handling events function ActionLink() { function handleClick(e) { e.preventDefault(); console.log('The link was clicked.'); } return ( a href= # onClick={handleClick} Click me /a ); } Conditional rendering render() { const isLoggedIn = this.state.isLoggedIn; return ( div The user is b {isLoggedIn ? 'currently' : 'not'} /b logged in. /div ); } List and Keys function NumberList(props) { const numbers = props.numbers; return ( ul {numbers.map((number) = ListItem key={number.toString()} value={number} / )} /ul ); } Forms class NameForm extends React.Component { constructor(props) { super(props); this.state = {value: ''}; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({value: event.target.value}); } handleSubmit(event) { alert('A name was submitted: ' + this.state.value); event.preventDefault(); } render() { return ( form onSubmit={this.handleSubmit} label Name: input type= text value={this.state.value} onChange={this.handleChange} / /label input type= submit value= Submit / /form ); } } Import CSS import './styles/style.css' Declare state export class Counter extends React.Component { constructor(props) { super(props); this.state = {count: props.initialCount}; } defaultProps example Notification.defaultProps = { actionTitle: '', selectedElements: {}, actionLogs: [], }; propTypes example Notification.propTypes = { actionTitle: PropTypes.string, isOpen: PropTypes.bool.isRequired, close: PropTypes.func.isRequired, elementTitle: PropTypes.objectOf(PropTypes.any), selectedElements: PropTypes.arrayOf(PropTypes.any), }; Import statement - imr import React from 'react'; Import React and Component - imrc import React, { Component } from 'react'; Make a Class Component and export - cc class | extends Component { state = { | }, render() { return ( | ); } } export default |; componentDidMount - cdm componentDidMount() { | } componentDidUpdate - cdu componentDidUpdate(prevProps, prevState) { | } setState - ss this.setState({ | : | }); render - ren render() { return ( | ); } export example with mapStateToProps, mapDispatchToProps export default connect(mapStateToProps, mapDispatchToProps)(Name); mapStateToProps example const mapStateToProps = (state) = { return { elements: state.refreshRaidElements.raidElements, controllers: state.refreshControllers.controllers, waitingLogs: state.watingLogs.wating_action_logs, }; }; mapDispatchToProps Import actions import { checkboxClicked, selectedIndex } from '../../../store/actions/ElementsAction'; Emit action this.props.selectedRaidIndex(id); Dispatch actions const mapDispatchToProps = (dispatch) = { return { checkboxClicked: id = dispatch(checkboxClicked(id)), selectedIndex: id = dispatch(selectedIndex(id)), }; }; React Redux Thunk Actions in Redux are dispatched synchronously. Thankfully though, Redux allows for middleware that sits between an action being dispatched and the action reaching the reducers. Redux Thunk is a middleware that lets you call action creators that return a function instead of an action object. That function receives the store\u2019s dispatch method, which is then used to dispatch regular synchronous actions inside the body of the function once the asynchronous operations have completed. Install redux-thunk npm install redux-thunk Apply middleware to app store. import React from 'react'; import ReactDOM from 'react-dom'; import { createStore, applyMiddleware } from 'redux'; import { Provider } from 'react-redux'; import thunk from 'redux-thunk'; import rootReducer from './reducers'; import App from './App'; // use applyMiddleware to add the thunk middleware to the store const store = createStore(rootReducer, applyMiddleware(thunk)); ReactDOM.render( Provider store={store} App / /Provider , document.getElementById('root') ); The most common use-case for Redux Thunk is for communicating asynchronously with an external API to retrieve or save data. AddTodo.jsx import { connect } from 'react-redux'; import { addTodo } from '../actions'; import NewTodo from '../components/NewTodo'; const mapDispatchToProps = dispatch = { return { onAddTodo: todo = { dispatch(addTodo(toto)); } }; }; export default connect( null, mapDispatchToProps )(NewTodo); actions/index.jsx import { ADD_TODO_SUCCESS, ADD_TODO_FAILURE, ADD_TODO_STARTED, DELETE_TODO } from './types'; import axios from 'axios'; export const addTodo = ({ title, userId }) = { return dispatch = { dispatch(addTodoStarted()); axios .post(`https://jsonplaceholder.typicode.com/todos`, { title, userId, completed: false }) .then(res = { dispatch(addTodoSuccess(res.data)); }) .catch(err = { dispatch(addTodoFailure(err.message)); }); }; }; const addTodoSuccess = todo = ({ type: ADD_TODO_SUCCESS, payload: { ...todo } }); const addTodoStarted = () = ({ type: ADD_TODO_STARTED }); const addTodoFailure = error = ({ type: ADD_TODO_FAILURE, payload: { error } }); reducers/todoReducers.jsx import { ADD_TODO_SUCCESS, ADD_TODO_FAILURE, ADD_TODO_STARTED, DELETE_TODO } from '../actions/types'; const initialState = { loading: false, todos: [], error: null }; export default function todosReducer(state = initialState, action) { switch (action.type) { case ADD_TODO_STARTED: return { ...state, loading: true }; case ADD_TODO_SUCCESS: return { ...state, loading: false, error: null, todos: [...state.todos, action.payload] }; case ADD_TODO_FAILURE: return { ...state, loading: false, error: action.payload.error }; default: return state; } } REST API A REST API consists of an assembly of interlinked resources. A Web API conforming to the REST architectural style is a REST API. Having a REST API makes a web service \u201cRESTful.\u201d A REST API is composed of four distinct resource archetypes: document, collection, store, and controller URI Format generic URI syntax as shown below: URI = scheme :// authority / path [ ? query ] [ # fragment ] Forward slash separator (/) indicates a hierarchical relationship underscores (_) should not be used in uris Trailing forward slash (/) should not be included in uris hyphens (-) should be used to improve readability of uris lowercase letters should be preferred in uri paths crud function names should not be used in uris query component of a URI may be used to filter collections or stores Request Methods CRUD requests: DELETE, GET, POST, PUT HEAD retrieve metadata. OPTIONS retrieve metadata of resource\u2019s available interactions. Some Responses status 200 success 201 new resource has been created 202 Accepted, start of an asynchronous action 204 No Content body left blank 301 Moved Permanently 400 Bad Request Indicates a nonspecific client error 401 Unauthorized 402 Forbidden 404 Not Found 405 Method Not Allowed HTTP Headers Various forms of metadata may be conveyed through the entity headers. Request headers Cookie: HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user\u2019s request. The client may store it and send it back with the next request to the same server. User-Agent: identify the application type, operating system, software vendor Host: The Host request header specifies the domain name of the server X-Requested-With: Mainly used to identify AJAX requests. Accept-Language which languages the client is able to understand Response headers Content-Type Content-Length size of the response body Set-Cookie used to send cookies from the server to the client. Body Format A REST API commonly uses a response message\u2019s entity body to help convey the state of a request message\u2019s identified resource. Today, the most commonly used text formats is JSON. Axios - HTTP client Axios install npm install axios --save Basic get request componentDidMount() { axios.get(`https://jsonplaceholder.typicode.com/users`) .then(res = { const persons = res.data; this.setState({ persons }); }) } Multiple get requests let URL1 = https://www.something.com let URL2 = https://www.something1.com let URL3 = https://www.something2.com const promise1 = axios.get(URL1); const promise2 = axios.get(URL2); const promise3 = axios.get(URL3); Promise.all([promise1, promise2, promise3]).then(function(values) { console.log(values); }); GRAPHQL GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. - Open source and created by Facebook - Gives clients the power to describe exactly what data they want - Can sit in front of any existing API because its just a query language GraphQL vs REST - GraphQL only has one URL. Request details are in a POST body (or GET) - In REST, shape and size of data resource is determined by the server, In Graphql its determined by the query (request) - In REST, you have to male multiple API calls to retrieve relational data, in GraphQL you can start with entry resource and traverse all the connections in one request - In REST, the shape of the response is determined by whom ever created the server, in GraphQL the shape is determined by the query Terminology - Query - Queries specify which endpoints we want to call, how we want the response to look - Fields - Properties that comprise the shape of a response - Type - A collection of fields that make up a specific queryable object. - Mutation - A special kind of GraphQL query that causes changes to the data available on the backend - Schema - A special kind of document that describes how a GraphQL endpoint can receive and send information - Query Language - The syntax we use to write GraphQL queries that retrieve data from an endpoint - Self-documenting API - An API that can be easily understood just by reading its schema -- no extra documentation needed Example frontend graphql query in react npm install -g npx // (npx comes with npm 5.2+ and higher) npx create-react-app react-graphql-test npm start Dependencies install npm install apollo-boost react-apollo graphql-tag graphql apollo-boost: Package containing reccomended Apollo Client setup react-apollo: View layer integration for React graphql-tag: Necessary for parsing your GraphQL queries graphql: Also parses your GraphQL queries in App.js import ApolloClient from apollo-boost ; const client = new ApolloClient({ uri: [Insert URI of GraphQL endpoint] }); Connect the instance of ApolloClient to the React app import { ApolloProvider } from react-apollo ; ... const App = () = ( ApolloProvider client={client} div h2 My first Apollo app /h2 /div /ApolloProvider ); Retrieve a list of Courses. Query component makes it extremely easy to embed the GraphQL query directly in the JSX code of the component. import React from 'react'; import { Query } from react-apollo ; import gql from graphql-tag ; const Courses = () = ( Query query={gql` { allCourses { id title author description topic url } } `} {({ loading, error, data }) = { if (loading) return p Loading... /p ; if (error) return p Error :( /p ; return data.allCourses.map(({ id, title, author, description, topic, url }) = ( div key={id} p {`${title} by ${author}`} /p /div )); }} /Query ); export default Courses; SOCKET socket client socket install npm i socket.io-client const io = require('socket.io-client')('https://'.concat(document.domain).concat(':').concat(location.port)); export default io; io Emit from client import io from './components/common/io'; io.emit('populate_table', { table_name: 'users_table' }); io Receive io.on('isloggedin', (payload) = { ... } Remove listeners io.removeAllListeners('action_response'); socketio server flask from app.server import socketio @socketio.on(socket_names.UPLOAD_LICENSE) def upload_license_action(args): Upload a new license file. data = args['data'] uuid = args['uuid'] sid = request.sid user_store.update_previous_connection(sid) socketio.emit(socket_names.ACTION_TIME, { 'action_time': now(sid)}, room=sid) with thread_lock: socketio.start_background_task( target=upload_license, kwargs={'data': data, 'sid': sid, 'uuid': uuid}) CSS3/SASS Responsive Design Defined by three characteristics Flexible grid-based layout Media queries (CSS3) Images that resize FLEXBOX Parent Flex Container display: flex | inline-flex; flex-direction: row | row-reverse | column | columnreverse; flex-wrap: wrap | nowrap | wrap-reverse; flex-flow (shorthand for flex-direction and flexwrap) justify-content: flex-start | flex-end | center | spacebetween | space-around | space-evenly; align-items: flex-start | flex-end | center | baseline | stretch; align-content (cross axis - adjust to largest item): flex-start | flex-end | center | stretch | spacebetween | space-around; Children Flex Items order: integer ; flex-grow: number ; flex-shrink: number ; flex-basis: length | auto; flex: shorthand for grow, shrink, and basis (default: 0 1 auto) align-self: overrides alignment set on parent GRID Grid Container display: grid | inline-grid; grid-template-columns: track-size ... | line-name track-size ...; grid-template-rows: track-size ... | line-name track-size ...; grid-template-areas: grid-area-name ; grid-template: A shorthand for setting grid-template-rows, grid-template-columns, and grid-template-areas in a single declaration. grid-column-gap: line-size ; grid-row-gap: line-size ; grid-gap: A shorthand for grid-row-gap and grid-column-gap justify-items: start | end | center | stretch; align-items: start | end | center | stretch; place-items: place-items sets both the align-items and justify-items properties in a single declaration. justify-content: start | end | center | stretch | space-around | space-between | space-evenly; align-content: start | end | center | stretch | space-around | space-between | space-evenly; place-content: place-content sets both the align-content and justify-content properties in a single declaration. grid-auto-columns: track-size ...; grid-auto-rows: track-size ...; grid-auto-flow: row | column | row dense | column dense grid: A shorthand for setting all of the following properties in a single declaration: grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and grid-auto-flow Grid Items grid-column-start: number | name | span number | span name | auto grid-column-end: number | name | span number | span name | auto grid-row-start: number | name | span number | span name | auto grid-row-end: number | name | span number | span name | auto grid-column: start-line / end-line | start-line / span value ; grid-row: start-line / end-line | start-line / span value ; grid-area: name | row-start / column-start / row-end / column-end ; justify-self: start | end | center | stretch; align-self: start | end | center | stretch; place-self: center; Media Queries /* ##Device = Desktops ##Screen = 1281px to higher resolution desktops */ @media (min-width: 1281px) {} /* ##Device = Laptops, Desktops ##Screen = B/w 1025px to 1280px */ @media (min-width: 1025px) and (max-width: 1280px) {} /* ##Device = Tablets, Ipads (portrait) ##Screen = B/w 768px to 1024px */ @media (min-width: 768px) and (max-width: 1024px) {} /* ##Device = Tablets, Ipads (landscape) ##Screen = B/w 768px to 1024px */ @media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {} /* ##Device = Low Resolution Tablets, Mobiles (Landscape) ##Screen = B/w 481px to 767px */ @media (min-width: 481px) and (max-width: 767px) {} /* ##Device = Most of the Smartphones Mobiles (Portrait) ##Screen = B/w 320px to 479px */ @media (min-width: 320px) and (max-width: 480px) {} BEM (Block Element Modifier) div class= block__element block__element--modifier Hallo /div .block { __element { background: blue; --modifier { color: white; } } } BEM with Sass .person { __hand {/* Styles */} __leg {/* Styles */} --male { /* Styles */ __hand { /* Styles */ --left {/* Styles */} --right {/* Styles */} } __leg { /* Styles */ --left {/* Styles */} --right {/* Styles */} } } --female { /* Styles */ __hand { /* Styles */ --left {/* Styles */} --right {/* Styles */} } __leg { /* Styles */ --left {/* Styles */} --right {/* Styles */} } } } Install SASS $ npm install sass-loader node-sass --save-dev Update the webpack.config.js to chain sass-loader , then css-loader and then chain their output to style-loader (Loader-chaining) Module:{ Rules:[ { test:/\\.(s*)css$/, use:['style-loader','css-loader', 'sass-loader'] } ] }, SCSS Import @import 'reset'; SCSS Variables $zHeader: 2000; $zOverlay: 5000; $zMessage: 5050; .header { z-index: $zHeader; } .overlay { z-index: $zOverlay; } .message { z-index: $zMessage; } SCSS Mixins @mixin square($size, $color) { width: $size; height: $size; background-color: $color; } .small-blue-square { @include square(20px, rgb(0,0,255)); } .big-red-square { @include square(300px, rgb(255,0,0)); } SCSS CrossBrowser Mixins @mixin transform-tilt() { $tilt: rotate(15deg); -webkit-transform: $tilt; /* Ch 36, Saf 5.1+, iOS, An = 4.4.4 */ -ms-transform: $tilt; /* IE 9 */ transform: $tilt; /* IE 10, Fx 16+, Op 12.1+ */ } .frame:hover { @include transform-tilt; } SCSS Extend Extending should be used when we need similarly styled elements, which still differ in some detail. .dialog-button { box-sizing: border-box; color: #ffffff; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.12); padding: 12px 40px; cursor: pointer; } .confirm { @extend .dialog-button; background-color: #87bae1; float: left; } .cancel { @extend .dialog-button; background-color: #e4749e; float: right; } SCSS Nesting Organize your stylesheet in a way that resembles the HTML more closely. ul { list-style: none; li { padding: 15px; display: inline-block; a { text-decoration: none; font-size: 16px; color: #444; } } } Nested Pseudo Classes and Pseudo Elements .weather { @extend %module; @include transition(all 0.3s ease-out); background: LightCyan; :hover { background: DarkCyan; } ::before { content: ; display: block; } ... } SCSS Operations $width: 800px; .container { width: $width; } .column-half { width: $width / 2; } .column-fifth { width: $width / 5; } Selectors Descendant Selector all p elements inside div elements div p { background-color: yellow; } Child Selector all p elements that are immediate children of a div element div p { background-color: yellow; } Adjacent Sibling Selector all p elements that are placed immediately after div elements div + p { background-color: yellow; } General Sibling Selector all p elements that are siblings of div elements div ~ p { background-color: yellow; } TESTING Enzyme is a JavaScript Testing utility created for react, maintained by Airbnb that makes it easier to assert, manipulate, and traverse your React Components' output. Jest is a test framework managed by Facebook. install enzyme along with an Adapter corresponding to the version of react. npm i --save-dev enzyme enzyme-adapter-react-16 Jest Setup with React: npm install --save-dev jest babel-jest babel-preset-env babel-preset-react react-test-renderer Add into babel configuration env : { test : { presets : [ es2015 , react , stage-0 ] } } useful for debug console.log(wrapper.debug()); import configureStore from 'redux-mock-store'; import { shallow } from 'enzyme'; import { shallowWithIntl, loadTranslationObject } from 'enzyme-react-intl'; import toJson from 'enzyme-to-json'; import renderer from 'react-test-renderer'; import translations from '../src/translations/en.json'; import io from '../src/components/common/io'; loadTranslationObject(translations); const initialState = { open: false, errors: [], elements: [ { id: '0x00000000001', size: '300000', cache_size: '256', state: 'online', }, { id: '0x00000000002', size: '2000', cache_size: '128', state: 'offline', } ] } const mockStore= configureStore(); let store; let wrapper; let instance; beforeEach(() = { store = mockStore(initialState); wrapper = shallowWithIntl( Raids store={store} {...defaultProps} / ).shallow().dive(); instance = wrapper.instance(); }); describe('Check Initial State', () = { it('Open set to false', () = { expect(wrapper.state('open')).toBe(false); }); it('Errors set to empty array', () = { expect(wrapper.state('errors')).toEqual([]); }); }); describe('Simulate Events', () = { it('Calls checkErrors on button click', () = { wrapper.instance().checkErrors = jest.fn(); wrapper.find('.buttonSubmit').simulate('click'); expect(wrapper.instance().checkErrors).toHaveBeenCalled(); }); }); describe('Component Methods', () = { it('Tests state value after calling method', () = { const expectedValue = 'AAAAAAAAAA'; instance.selectName(expectedValue); expect(wrapper.state(['elementName'])).toBe(expectedValue); }); }); describe('Snapshots tests', () = { it('Tests component rendering snapshot', () = { expect(toJson(wrapper)).toMatchSnapshot(); }); it('DisplayErrors match snapshot', () = { const instance = wrapper.instance(); const displayErrors = instance.displayErrors(); const errorRender = renderer.create(displayErrors).toJSON(); expect(errorRender).toMatchSnapshot(); }); }); describe('Component Rendering', () = { it('Renders header', () = { const header = wrapper.find('ModalHeader').exists(); expect(header).toBe(true); }); it('Renders content', () = { const content = wrapper.find('ModalContent').exists(); expect(content).toBe(true); }); it('Renders actions', () = { const actions = wrapper.find('ModalActions').exists(); expect(actions).toBe(true); }); }); describe('Emit data check', () = { const emit = jest.spyOn(io, 'emit'); it('Submit form with correct data', () = { instance.createElement(); const uuid = expect.any(String); expect(emit).toHaveBeenCalledWith('action', { elements: [elementInfo], action_type: 'create_element', uuid }); }); });","title":"FRONTEND"},{"location":"frontend/#frontend","text":"","title":"FRONTEND"},{"location":"frontend/#javascript","text":"","title":"JAVASCRIPT"},{"location":"frontend/#es6","text":"Spread Operator 1 const userInfo = { isAuthenticated: false } const action = { isAuthenticated: true, type: 'nope' } const res = { ...userInfo, isAuthenticated: action.isAuthenticated }; console.log(res); // { isAuthenticated: true } Spread Operator 2 var mid = [3, 4]; var arr = [1, 2, ...mid, 5, 6]; console.log(arr); // [ 1, 2, 3, 4, 5, 6 ] Spread Operator 3 let nums = [1, 2, 3]; let abcs = ['a', 'b', 'c']; let alphanum = [ ...nums, ...abs ]; // [1, 2, 3, 'a', 'b', 'c'] Destructuring 1 var address = { city: London , state: UK , zip: 1334 }; let {city, state, zip} = address; log(city); // 'London' log(state); // 'UK' log(zip); // 1334 Destructuring 2 var address = { city: London , state: UK , zip: 1334 }; let {city: c, state: s, zip: z} = address; log(c, s, z); // 'London UK 1334' Destructuring 3 var person = {name: 'Aaaaaa', age: 35}; displayPerson(person); function displayPerson({name, age}) { // do something with name and age to display them } Destructuring 4 var person = {name: 'Aaaaaa', age: 35}; let {name, age, address} = person; // error! let {name, age, ?address} = person; // OK let ?{name, age, address} = person; // OK Destructuring 5 var nums = [1, 2, 3, 4]; doSomething(nums); function doSomething([first, second, ...others]){ log(first); //logs 1 log(second); //logs 2 log(others); //logs [3, 4] } Arrow functions 1 Specifying parameters: () = { ... } // no parameter x = { ... } // one parameter, an identifier (x, y) = { ... } // several parameters Specifying a body: x = { return x * x } // block x = x * x // expression, equivalent to previous line Arrow function 2 const phraseSplitterEs6 = phrase = phrase.split( ); Arrow function 3 var docLogEs6 = () = { console.log(document); }; Arrow function 4 const smartPhones = [ { name:'iphone', price:649 }, { name:'Galaxy S6', price:576 }, { name:'Galaxy Note 5', price:489 } ]; // ES6 const prices = smartPhones.map(smartPhone = smartPhone.price); console.log(prices); // [649, 576, 489]","title":"ES6"},{"location":"frontend/#react","text":"State React is all about one-way data flow down the component hierarchy. State is created in the component and stays in the component. It can be passed to a children as its props. Basic Concepts - JSX - Rendering Elements - Components Functional/Container - State and Lifecycle - Handling Events - Conditional Rendering - Lists and Keys - Forms JSX MyComponent message={'hello world'} / Rendering elements class TodoList extends React.Component { render() { return ( ul {this.props.items.map(item = ( li key={item.id} {item.text} /li ))} /ul ); } } Stateless function component - sfc const | = props = { return ( | ); }; export default |; State and lifecycle Mounting These methods are called in the following order: constructor() static getDerivedStateFromProps() render() componentDidMount() Updating An update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered: static getDerivedStateFromProps() shouldComponentUpdate() render() getSnapshotBeforeUpdate() componentDidUpdate() Unmounting This method is called when a component is being removed from the DOM: componentWillUnmount() Handling events function ActionLink() { function handleClick(e) { e.preventDefault(); console.log('The link was clicked.'); } return ( a href= # onClick={handleClick} Click me /a ); } Conditional rendering render() { const isLoggedIn = this.state.isLoggedIn; return ( div The user is b {isLoggedIn ? 'currently' : 'not'} /b logged in. /div ); } List and Keys function NumberList(props) { const numbers = props.numbers; return ( ul {numbers.map((number) = ListItem key={number.toString()} value={number} / )} /ul ); } Forms class NameForm extends React.Component { constructor(props) { super(props); this.state = {value: ''}; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({value: event.target.value}); } handleSubmit(event) { alert('A name was submitted: ' + this.state.value); event.preventDefault(); } render() { return ( form onSubmit={this.handleSubmit} label Name: input type= text value={this.state.value} onChange={this.handleChange} / /label input type= submit value= Submit / /form ); } } Import CSS import './styles/style.css' Declare state export class Counter extends React.Component { constructor(props) { super(props); this.state = {count: props.initialCount}; } defaultProps example Notification.defaultProps = { actionTitle: '', selectedElements: {}, actionLogs: [], }; propTypes example Notification.propTypes = { actionTitle: PropTypes.string, isOpen: PropTypes.bool.isRequired, close: PropTypes.func.isRequired, elementTitle: PropTypes.objectOf(PropTypes.any), selectedElements: PropTypes.arrayOf(PropTypes.any), }; Import statement - imr import React from 'react'; Import React and Component - imrc import React, { Component } from 'react'; Make a Class Component and export - cc class | extends Component { state = { | }, render() { return ( | ); } } export default |; componentDidMount - cdm componentDidMount() { | } componentDidUpdate - cdu componentDidUpdate(prevProps, prevState) { | } setState - ss this.setState({ | : | }); render - ren render() { return ( | ); } export example with mapStateToProps, mapDispatchToProps export default connect(mapStateToProps, mapDispatchToProps)(Name); mapStateToProps example const mapStateToProps = (state) = { return { elements: state.refreshRaidElements.raidElements, controllers: state.refreshControllers.controllers, waitingLogs: state.watingLogs.wating_action_logs, }; }; mapDispatchToProps Import actions import { checkboxClicked, selectedIndex } from '../../../store/actions/ElementsAction'; Emit action this.props.selectedRaidIndex(id); Dispatch actions const mapDispatchToProps = (dispatch) = { return { checkboxClicked: id = dispatch(checkboxClicked(id)), selectedIndex: id = dispatch(selectedIndex(id)), }; }; React Redux Thunk Actions in Redux are dispatched synchronously. Thankfully though, Redux allows for middleware that sits between an action being dispatched and the action reaching the reducers. Redux Thunk is a middleware that lets you call action creators that return a function instead of an action object. That function receives the store\u2019s dispatch method, which is then used to dispatch regular synchronous actions inside the body of the function once the asynchronous operations have completed. Install redux-thunk npm install redux-thunk Apply middleware to app store. import React from 'react'; import ReactDOM from 'react-dom'; import { createStore, applyMiddleware } from 'redux'; import { Provider } from 'react-redux'; import thunk from 'redux-thunk'; import rootReducer from './reducers'; import App from './App'; // use applyMiddleware to add the thunk middleware to the store const store = createStore(rootReducer, applyMiddleware(thunk)); ReactDOM.render( Provider store={store} App / /Provider , document.getElementById('root') ); The most common use-case for Redux Thunk is for communicating asynchronously with an external API to retrieve or save data. AddTodo.jsx import { connect } from 'react-redux'; import { addTodo } from '../actions'; import NewTodo from '../components/NewTodo'; const mapDispatchToProps = dispatch = { return { onAddTodo: todo = { dispatch(addTodo(toto)); } }; }; export default connect( null, mapDispatchToProps )(NewTodo); actions/index.jsx import { ADD_TODO_SUCCESS, ADD_TODO_FAILURE, ADD_TODO_STARTED, DELETE_TODO } from './types'; import axios from 'axios'; export const addTodo = ({ title, userId }) = { return dispatch = { dispatch(addTodoStarted()); axios .post(`https://jsonplaceholder.typicode.com/todos`, { title, userId, completed: false }) .then(res = { dispatch(addTodoSuccess(res.data)); }) .catch(err = { dispatch(addTodoFailure(err.message)); }); }; }; const addTodoSuccess = todo = ({ type: ADD_TODO_SUCCESS, payload: { ...todo } }); const addTodoStarted = () = ({ type: ADD_TODO_STARTED }); const addTodoFailure = error = ({ type: ADD_TODO_FAILURE, payload: { error } }); reducers/todoReducers.jsx import { ADD_TODO_SUCCESS, ADD_TODO_FAILURE, ADD_TODO_STARTED, DELETE_TODO } from '../actions/types'; const initialState = { loading: false, todos: [], error: null }; export default function todosReducer(state = initialState, action) { switch (action.type) { case ADD_TODO_STARTED: return { ...state, loading: true }; case ADD_TODO_SUCCESS: return { ...state, loading: false, error: null, todos: [...state.todos, action.payload] }; case ADD_TODO_FAILURE: return { ...state, loading: false, error: action.payload.error }; default: return state; } }","title":"REACT"},{"location":"frontend/#rest-api","text":"A REST API consists of an assembly of interlinked resources. A Web API conforming to the REST architectural style is a REST API. Having a REST API makes a web service \u201cRESTful.\u201d A REST API is composed of four distinct resource archetypes: document, collection, store, and controller URI Format generic URI syntax as shown below: URI = scheme :// authority / path [ ? query ] [ # fragment ] Forward slash separator (/) indicates a hierarchical relationship underscores (_) should not be used in uris Trailing forward slash (/) should not be included in uris hyphens (-) should be used to improve readability of uris lowercase letters should be preferred in uri paths crud function names should not be used in uris query component of a URI may be used to filter collections or stores Request Methods CRUD requests: DELETE, GET, POST, PUT HEAD retrieve metadata. OPTIONS retrieve metadata of resource\u2019s available interactions. Some Responses status 200 success 201 new resource has been created 202 Accepted, start of an asynchronous action 204 No Content body left blank 301 Moved Permanently 400 Bad Request Indicates a nonspecific client error 401 Unauthorized 402 Forbidden 404 Not Found 405 Method Not Allowed HTTP Headers Various forms of metadata may be conveyed through the entity headers. Request headers Cookie: HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user\u2019s request. The client may store it and send it back with the next request to the same server. User-Agent: identify the application type, operating system, software vendor Host: The Host request header specifies the domain name of the server X-Requested-With: Mainly used to identify AJAX requests. Accept-Language which languages the client is able to understand Response headers Content-Type Content-Length size of the response body Set-Cookie used to send cookies from the server to the client. Body Format A REST API commonly uses a response message\u2019s entity body to help convey the state of a request message\u2019s identified resource. Today, the most commonly used text formats is JSON.","title":"REST API"},{"location":"frontend/#axios-http-client","text":"Axios install npm install axios --save Basic get request componentDidMount() { axios.get(`https://jsonplaceholder.typicode.com/users`) .then(res = { const persons = res.data; this.setState({ persons }); }) } Multiple get requests let URL1 = https://www.something.com let URL2 = https://www.something1.com let URL3 = https://www.something2.com const promise1 = axios.get(URL1); const promise2 = axios.get(URL2); const promise3 = axios.get(URL3); Promise.all([promise1, promise2, promise3]).then(function(values) { console.log(values); });","title":"Axios - HTTP client"},{"location":"frontend/#graphql","text":"GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. - Open source and created by Facebook - Gives clients the power to describe exactly what data they want - Can sit in front of any existing API because its just a query language GraphQL vs REST - GraphQL only has one URL. Request details are in a POST body (or GET) - In REST, shape and size of data resource is determined by the server, In Graphql its determined by the query (request) - In REST, you have to male multiple API calls to retrieve relational data, in GraphQL you can start with entry resource and traverse all the connections in one request - In REST, the shape of the response is determined by whom ever created the server, in GraphQL the shape is determined by the query Terminology - Query - Queries specify which endpoints we want to call, how we want the response to look - Fields - Properties that comprise the shape of a response - Type - A collection of fields that make up a specific queryable object. - Mutation - A special kind of GraphQL query that causes changes to the data available on the backend - Schema - A special kind of document that describes how a GraphQL endpoint can receive and send information - Query Language - The syntax we use to write GraphQL queries that retrieve data from an endpoint - Self-documenting API - An API that can be easily understood just by reading its schema -- no extra documentation needed Example frontend graphql query in react npm install -g npx // (npx comes with npm 5.2+ and higher) npx create-react-app react-graphql-test npm start Dependencies install npm install apollo-boost react-apollo graphql-tag graphql apollo-boost: Package containing reccomended Apollo Client setup react-apollo: View layer integration for React graphql-tag: Necessary for parsing your GraphQL queries graphql: Also parses your GraphQL queries in App.js import ApolloClient from apollo-boost ; const client = new ApolloClient({ uri: [Insert URI of GraphQL endpoint] }); Connect the instance of ApolloClient to the React app import { ApolloProvider } from react-apollo ; ... const App = () = ( ApolloProvider client={client} div h2 My first Apollo app /h2 /div /ApolloProvider ); Retrieve a list of Courses. Query component makes it extremely easy to embed the GraphQL query directly in the JSX code of the component. import React from 'react'; import { Query } from react-apollo ; import gql from graphql-tag ; const Courses = () = ( Query query={gql` { allCourses { id title author description topic url } } `} {({ loading, error, data }) = { if (loading) return p Loading... /p ; if (error) return p Error :( /p ; return data.allCourses.map(({ id, title, author, description, topic, url }) = ( div key={id} p {`${title} by ${author}`} /p /div )); }} /Query ); export default Courses;","title":"GRAPHQL"},{"location":"frontend/#socket","text":"socket client socket install npm i socket.io-client const io = require('socket.io-client')('https://'.concat(document.domain).concat(':').concat(location.port)); export default io; io Emit from client import io from './components/common/io'; io.emit('populate_table', { table_name: 'users_table' }); io Receive io.on('isloggedin', (payload) = { ... } Remove listeners io.removeAllListeners('action_response'); socketio server flask from app.server import socketio @socketio.on(socket_names.UPLOAD_LICENSE) def upload_license_action(args): Upload a new license file. data = args['data'] uuid = args['uuid'] sid = request.sid user_store.update_previous_connection(sid) socketio.emit(socket_names.ACTION_TIME, { 'action_time': now(sid)}, room=sid) with thread_lock: socketio.start_background_task( target=upload_license, kwargs={'data': data, 'sid': sid, 'uuid': uuid})","title":"SOCKET"},{"location":"frontend/#css3sass","text":"","title":"CSS3/SASS"},{"location":"frontend/#testing","text":"Enzyme is a JavaScript Testing utility created for react, maintained by Airbnb that makes it easier to assert, manipulate, and traverse your React Components' output. Jest is a test framework managed by Facebook. install enzyme along with an Adapter corresponding to the version of react. npm i --save-dev enzyme enzyme-adapter-react-16 Jest Setup with React: npm install --save-dev jest babel-jest babel-preset-env babel-preset-react react-test-renderer Add into babel configuration env : { test : { presets : [ es2015 , react , stage-0 ] } } useful for debug console.log(wrapper.debug()); import configureStore from 'redux-mock-store'; import { shallow } from 'enzyme'; import { shallowWithIntl, loadTranslationObject } from 'enzyme-react-intl'; import toJson from 'enzyme-to-json'; import renderer from 'react-test-renderer'; import translations from '../src/translations/en.json'; import io from '../src/components/common/io'; loadTranslationObject(translations); const initialState = { open: false, errors: [], elements: [ { id: '0x00000000001', size: '300000', cache_size: '256', state: 'online', }, { id: '0x00000000002', size: '2000', cache_size: '128', state: 'offline', } ] } const mockStore= configureStore(); let store; let wrapper; let instance; beforeEach(() = { store = mockStore(initialState); wrapper = shallowWithIntl( Raids store={store} {...defaultProps} / ).shallow().dive(); instance = wrapper.instance(); }); describe('Check Initial State', () = { it('Open set to false', () = { expect(wrapper.state('open')).toBe(false); }); it('Errors set to empty array', () = { expect(wrapper.state('errors')).toEqual([]); }); }); describe('Simulate Events', () = { it('Calls checkErrors on button click', () = { wrapper.instance().checkErrors = jest.fn(); wrapper.find('.buttonSubmit').simulate('click'); expect(wrapper.instance().checkErrors).toHaveBeenCalled(); }); }); describe('Component Methods', () = { it('Tests state value after calling method', () = { const expectedValue = 'AAAAAAAAAA'; instance.selectName(expectedValue); expect(wrapper.state(['elementName'])).toBe(expectedValue); }); }); describe('Snapshots tests', () = { it('Tests component rendering snapshot', () = { expect(toJson(wrapper)).toMatchSnapshot(); }); it('DisplayErrors match snapshot', () = { const instance = wrapper.instance(); const displayErrors = instance.displayErrors(); const errorRender = renderer.create(displayErrors).toJSON(); expect(errorRender).toMatchSnapshot(); }); }); describe('Component Rendering', () = { it('Renders header', () = { const header = wrapper.find('ModalHeader').exists(); expect(header).toBe(true); }); it('Renders content', () = { const content = wrapper.find('ModalContent').exists(); expect(content).toBe(true); }); it('Renders actions', () = { const actions = wrapper.find('ModalActions').exists(); expect(actions).toBe(true); }); }); describe('Emit data check', () = { const emit = jest.spyOn(io, 'emit'); it('Submit form with correct data', () = { instance.createElement(); const uuid = expect.any(String); expect(emit).toHaveBeenCalledWith('action', { elements: [elementInfo], action_type: 'create_element', uuid }); }); });","title":"TESTING"}]}