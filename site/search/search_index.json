{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TOOLS GIT Create a New Git Repository from scratch mkdir to create a directory to contain the project. cd into the new directory. git init. Write code. (The first file to create is probably a ReadMe file) git add to add the files. git commit Create New Git Repository from existing project cd into the directory containing the project. git init. git add to add all of the relevant files. create a .gitignore to indicate all of the files you don\u2019t want to track git commit. Connect to github Go to github. Log in to your account. Click the new repository button in the top-right. Click the \u201cCreate repository\u201d button. git remote add origin git@github.com:username/new_repo git push -u origin master Create, switch and push origin new branch git checkout -b issue400-master git push -u origin issue400-master Add, Commit and Push git add sys_ui/css/FILE.css git add sys_ui/FILE.html git add app/dir/ git commit git push Delete a local and remote branch git branch -d branch_name git push origin --delete branch_name Clean Local branch git reset git checkout . git clean -fdx Clone repo git clone USER@10.0.2.10:/home/git/repos/sys . Clone specific branch git clone -b branch remote_repo git clone -b my-branch git@github.com:user/myproject.git Show current branch git branch Show local and remote branch git branch -a Check Status git status Check Log git log Graphical Log git log --graph --decorate Log commit subject of last 10 commits git log -10 --pretty=format: %h %s Edit Last Commit Message git commit --amend -m New commit message Single file history git log -p filename Get tag git log --decorate v0.4bugfix|head -n1|sed 's/.*tag: //;s/[^a-zA-Z.0-9].*//' Get commits by date and author git log --pretty=format: %ad - %an: %s --after= 2010-02-15 --until= 2018-08-20 --author= John Get number of commits by author git shortlog -s -n --all Remove local untracked files git clean -fdx Undo last commit. Warning: Don't do this if you've already pushed git reset HEAD~ Undo last commit. If you don't want the changes and blow everything away: Warning: Don't do this if you've already pushed git reset --hard HEAD~ Untrack .pyc files $ find . -name '*.pyc' | xargs -n 1 git rm --cached Switch to branch git checkout BRANCHNAME Pull from master branch git pull origin master Checkout master git chekcout master Merge branch into master git checkout master git merge user_interface Rebase git-rebase - Reapply commits on top of another base tip git checkout branchname git rebase master In case of conflicts, fix them and then: git add namefile.jsx git rebase --continue Create Tags git tag v1.0 ec32d32 git push origin --tags Undo a local commit git reset --soft HEAD^ # use --soft if you want to keep your changes git reset --hard HEAD^ # use --hard if you don't care about keeping the changes you made Undo git add git reset filename.jsx Make a copy of local branch git checkout old_branch git branch new_branch Show differences after git pull git diff master@{1} master Lists branches merged into master git branch --merged master Lists branches merged into HEAD git branch --merged Lists branches that have not been merged git branch --no-merged Checkout previous branch git checkout - Diff between branches Diff between current branch and master: git diff master Diff between two branches: git diff master..staging Show only files that are different between the two branches git diff --name-status master..staging Create New Branch and Checkout \u2013 In One Command git checkout -b branch_name Revert Changes to File git checkout -- file Squashing commits into one To maintain a clean commit log message when merging the remote branch to master. SCRIPT: #!/bin/bash # #commits to squash commitCount=$1 #get the commit message shift commitMessage=$@ #verify that squash number is an integer regex='^[0-9]+$' echo --------------------------------- echo Will squash $commitCount commits echo Commit message will be '$commitMessage' echo ...validating input if ! [[ $commitCount =~ $regex ]] then echo Squash count must be an integer. elif [ -z $commitMessage ] then echo Invalid, sure string is not empty else echo ...input looks good echo ...proceeding to squash git reset --soft HEAD~$commitCount git commit -m $commitMessage echo ...done fi echo exit 0 Find directories being used in your path. echo $PATH Pick a dir to put the script. For example \u201c/home/name/bin\u201d. Name script to \u201cgit-squash.sh\u201d. Make the file executable \u201cchmod +x file_name\u201d Now create an alias for git. Run \u201cls -la /bin/sh\u201d to find out the default shell. (e.g. dash) Run \u201c/bin/dash\u201d to enter the shell and execute: git config --global alias.squash !bash -c 'bash path_of_script /git-squash.sh \\$1 \\$2' - USAGE: Squash n commits: git squash n 'my commit message' You can skip as many commits as you want by change the number after the --skip flag. Combine the two commands to squash n amount of commits into one, with the specified commit message: git squash n $(git log -n 1 --skip n --pretty=%B) Now that the commit has been squashed into one, you can push to the remote branch on gitlab, by running this command: git push --force origin name_of_branch Git reset head Force previous commit to become head. git reset --hard COMMITID git push -f origin BRANCH LINUX TIPS Systems Directories / The root directory. /bin Contains binaries (programs) that must be present for the system to boot and run. /boot Contains Linux kernel, initial RAM disk image, and the boot loader. /dev This is a special directory which contains device nodes. /etc configuration files / shell scripts for system services at boot time. /home each user is given a directory in /home /lib Contains shared library files used by the core system /lost+found used in the case of a partial recovery from a file system corruption event /media mount points for removable media /mnt On older Linux systems, mount points for removable devices /opt to install \u201coptional\u201d software. /proc virtual file system maintained by the Linux kernel /root home directory for the root account. /sbin \u201csystem\u201d binaries. /tmp temporary files /usr all the programs and support files used by regular users. /usr/bin /usr/bin contains the executable programs installed by your Linux distribution /usr/lib shared libraries for the programs in /usr/bin. /usr/local programs that are not included with your distribution but are intended for systemwide use are installed. /usr/sbin system administration programs. /usr/share all the shared data used by programs in /usr/bin. /usr/share/doc packages documentation. /var where data that is likely to change is stored. /var/log log files Most used Commands ls Directory listing ls -al Formatted listing with hidden files ls -lt Sorting the Formatted listing by time modification cd dir Change directory to dir cd Change to home directory pwd Show current working directory mkdir dir Creating a directory dir cat file Places the standard input into the file more file Output the contents of the file head file Output the first 10 lines of the file tail file Output the last 10 lines of the file tail -f file Output the contents of file as it grows,starting with the last 10 lines touch file Create or update file rm file Deleting the file rm -r dir Deleting the directory rm -f file Force to remove the file rm -rf dir Force to remove the directory dir cp file1 file2 Copy the contents of file1 to file2 cp -r dir1 dir2 Copy dir1 to dir2;create dir2 if not present mv file1 file2 Rename or move file1 to file2,if file2 is an existing directory ln -s file link Create symbolic link link to file Process Management ps To display the currently working processes top Display all running process kill pid Kill the process with given pid killall proc Kill all the process named proc pkill pattern Will kill all processes matching the pattern bg List stopped or background jobs,resume a stopped job in the background fg Brings the most recent job to foreground fg n Brings job n to the foreground File permission chmod octal file Change the permission of file to octal,which can be found separately for user,group,world by adding, \u2022 4-read(r) \u2022 2-write(w) \u2022 1-execute(x) How many lines for file extension wc `find | grep jsx$` List nested folders/files tree -L 2 Find file find /path/to/file/ -iname filename Get differences between 2 folders diff --brief --recursive dir1/ dir2/ # GNU long options diff -qr dir1/ dir2/ # common short options Grep with exclude grep -r moment --exclude-dir=node_modules Grep files names only grep -rl text --exclude-dir=node_modules --exclude-dir=deploy --exclude-dir=.venv --- br h4 Truncate file content /h4 truncate -s 0 dash.txt br --- br h4 cat long file /h4 cat branch | more -d br --- br h4 Check if port is listening /h4 sudo netstat -ntlp | grep :443 br --- br h4 Find a string /h4 grep -r \"test\" - find string Find string include, exclude, ignore case grep -r -i \".ui\" --include *.scss --exclude app.scss Find Large files find / -size +10M -ls br --- br h4 Directory Size /h4 du -hs direcotryName br --- br h4 Show system name and kernel /h4 uname -a br --- br h4 Start a screen session /h4 screen br --- br h4 Resume a screen session /h4 screen -r br --- br h4 List screen sessions /h4 screen -list br --- br h4 List All Available Packages /h4 apt-cache pkgnames br --- br h4 Upgrade packages and Install git /h4 sudo apt-get update sudo apt-get upgrade sudo apt-get install git git --version br --- br h4 Package Name and Description of Software /h4 apt-cache search vsftpd br --- br h4 Remove packages /h4 sudo apt-get autoremove -y br --- br h4 Package Information /h4 apt-cache show netcat br --- br h4 Dependencies for Specific Packages /h4 apt-cache showpkg vsftpd br --- br h4 Update System Packages /h4 sudo apt-get update br --- br h4 Clean up disks space /h4 sudo apt-get clean br --- br h4 Download only source code /h4 sudo apt-get --download-only source vsftpd br --- br h4 Check broken dependencies /h4 sudo apt-get check br --- br h4 Remove files containing a string /h4 rm ? foo? ls -d ' foo ' | egrep -v '^foo|foo$' | xargs rm br --- br h4 Create folder and cd into it /h4 mkdir foo cd \"$_\" br --- br h4 Create Swap file /h4 sudo mkdir -v /var/cache/swap cd /var/cache/swap sudo dd if=/dev/zero of=swapfile bs=1K count=8M sudo chmod 600 swapfile sudo mkswap swapfil sudo mkswap swapfile sudo swapon swapfile top -bn1 | grep -i swap echo \"/var/cache/swap/swapfile none swap sw 0 0\" | sudo tee -a /etc/fstab br --- br h4 Change permission in filder and files /h4 Chmod chown find . -type d -exec chmod 777 {} + find . -type f -exec chmod 777 {} + br --- br h4 Mount/Unmount /h4 cat /proc/partitions mknod mknod /dev/vdb b 252 16 fdisk /dev/vdb mkfs.ext3 /dev/vdb mkdir /tmp/ciao mount /dev/vdb /tmp/ciao unmount /tmp/ciao br --- br h4 Compress/Uncompress Files /h4 Create a tar archive of a directory tar -cvf tarball_name.tar /path/to/directory c - Used for creating a new .tar file v - Verbosely outputs the creation of the .tar file f - Defines the file name of the archive file Create a tar.gz archive file tar -cvzf james.tar.gz /home/james/ create a bz2 archiv (j option) tar -cvjf james.tar.bz2 /home/james/ --- To uncompress or untar a .tar file , use the x option tar -xvf james.tar To extract the file to a different directory, use the -C + path tar -xvf james.tar -C /opt Uncompressing a tar.gz file tar -xvf james.tar.gz Sample output --- List contents of a tar file tar -tvf james.tar List contents of a tar.bz2 tar -tvf james.tar.bz2 Set Default folder for screenshots gsettings set org.gnome.gnome-screenshot auto-save-directory \"file:///home/username/Pictures/GUI/\" br --- br h4 Download files from command line /h4 curl -L -o \"/dir1/dir2/miofile.txt\" \"https://turbolab.it/scarica/204\" wget -O \"/dir1/dir2/miofile.txt\" \"https://turbolab.it/scarica/204\" br --- br h4 Download files from command line and assign name /h4 curl -o miofile.txt https://turbolab.it/scarica/204 wget -O miofile.txt https://turbolab.it/scarica/204 br --- br h4 REGEX /h4 [Regex checker](https://regex101.com/) [Regex examples](https://projects.lukehaas.me/regexhub/) [Regex cheatsheet](https://www.keycdn.com/support/regex-cheatsheet) Anchor Matches Anchors are special characters that specify where in the line a match must occur to be valid. grep \"^GNU\" GPL-3 // ^ Match initial part of line grep \"and$\" GPL-3 // $ Match end of line Matching Any Character grep \"..cept\" GPL-3 // .. 2 characters and then cept Bracket Expressions grep \"t[wo]o\" GPL-3 //By placing a group of characters within brackets (\"[\" and \"]\"), we can specify that the character at that position can be any one character found within the bracket group. grep \"^[A-Z]\" GPL-3 // find every line that begins with a capital letter Repeat Patterns grep \"([A-Za-z ]*)\" GPL-3 // each line that contained an opening and closing parenthesis Escaping Meta-Characters grep \"^[A-Z].*.$\" GPL-3 // find any line that begins with a capital letter and ends with a period Alternation grep -E \"(GPL|General Public License)\" GPL-3 // find either \"GPL\" or \"General Public License\" Quantifiers grep -E \"(copy)?right\" GPL-3 // matches \"copyright\" and \"right\" by putting \"copy\" in an optional group Match Repetition grep -E \"[AEIOUaeiou]{3}\" GPL-3 // contain triple-vowels grep -E \"[[:alpha:]]{16,20}\" GPL-3 // any words that have between 16 and 20 characters let regex; / matching a specific string / regex = /hello/; // looks for the string between the forward slashes (case-sensitive)... matches \"hello\", \"hello123\", \"123hello123\", \"123hello\"; doesn't match for \"hell0\", \"Hello\" regex = /hello/i; // looks for the string between the forward slashes (case-insensitive)... matches \"hello\", \"HelLo\", \"123HelLO\" regex = /hello/g; // looks for multiple occurrences of string between the forward slashes... / wildcards / regex = /h.llo/; // the \".\" matches any one character other than a new line character... matches \"hello\", \"hallo\" but not \"h\\nllo\" regex = /h. llo/; // the \" \" matches any character(s) zero or more times... matches \"hello\", \"heeeeeello\", \"hllo\", \"hwarwareallo\" / shorthand character classes / regex = /\\d/; // matches any digit regex = /\\D/; // matches any non-digit regex = /\\w/; // matches any word character (a-z, A-Z, 0-9, _) regex = /\\W/; // matches any non-word character regex = /\\s/; // matches any white space character (\\r (carriage return),\\n (new line), \\t (tab), \\f (form feed)) regex = /\\S/; // matches any non-white space character / specific characters / regex = /[aeiou]/; // matches any character in square brackets regex = /[ck]atherine/; // matches catherine or katherine regex = /[^aeiou]/; // matches anything except the characters in square brackets / character ranges / regex = /[a-z]/; // matches all lowercase letters regex = /[A-Z]/; // matches all uppercase letters regex = /[e-l]/; // matches lowercase letters e to l (inclusive) regex = /[F-P]/; // matches all uppercase letters F to P (inclusive) regex = /[0-9]/; // matches all digits regex = /[5-9]/; // matches any digit from 5 to 9 (inclusive) regex = /[a-zA-Z]/; // matches all lowercase and uppercase letters regex = /[^a-zA-Z]/; // matches non-letters / matching repetitions using quantifiers / regex = /(hello){4}/; // matches \"hellohellohellohello\" regex = /hello{3}/; // matches \"hellooo\" and \"helloooo\" but not \"helloo\" regex = /\\d{3}/; // matches 3 digits (\"312\", \"122\", \"111\", \"12312321\" but not \"12\") regex = /\\d{3,7}/; // matches digits that occur between 3 and 7 times (inclusive) regex = /\\d{3,}/; // matches digits that occur at least 3 times / matching repetitions using star and plus / regex = /ab*c/; // matches zero or more repetitions of \"b\" (matches \"abc\", \"abbbbc\", \"ac\") regex = /ab+c/; // matches one or more repetitions of \"b\" (matches \"abc\", \"abbbbc\", but not \"ac\") / matching beginning and end items / regex = /^[A-Z]\\w /; // matches \"H\", \"Hello\", but not \"hey\" regex = /\\w s$/; // matches \"cats\", \"dogs\", \"avocados\", but not \"javascript\" /* matching word boundaries positions of word boundaries: 1. before the first character in string (if first character is a word character) 2. after the last character in the string, if the last character is a word character 3. between two characters in string, where one is a word character and the other isn't */ regex = /\\bmeow\\b/; // matches \"hey meow lol\", \"hey:meow:lol\", but not \"heymeow lol\" / groups / regex = /it is (ice )?cold outside/; // matches \"it is ice cold outside\" and \"it is cold outside\" regex = /it is (?:ice )?cold outside/; // same as above except it is a non-capturing group regex = /do (cats) like taco \\1/; // matches \"do cats like taco cats\" regex = /do (cats) like (taco)\\? do \\2 \\1 like you\\?/; // matches \"do cats like taco? do taco cats like you?\" //branch reset group (available in Perl, PHP, R, Delphi... commented out because this is a js file) // regex = /(?|(cat)|(dog))\\1/; // matches \"catcat\" and \"dogdog\" / alternative matching / regex = /i like (tacos|boba|guacamole)./; // matches \"i like tacos.\", \"i like boba.\", and \"i like guacamole.\" / forward reference (available in Perl, PHP, Java, Ruby, etc... commented out because this is a js file) / // regex = /(\\2train|(choo))+/; // matches \"choo\", \"choochoo\", \"chootrain\", choochootrain\", but not \"train\" / lookaheads / regex = /z(?=a)/; // positive lookahead... matches the \"z\" before the \"a\" in pizza\" but not the first \"z\" regex = /z(?!a)/; // negative lookahead... matches the first \"z\" but not the \"z\" before the \"a\" / lookbehinds / regex = /(? =[aeiou])\\w/; // positive lookbehind... matches any word character that is preceded by a vowel regex = /(? ![aeiou])\\w/; // negative lookbehind... matches any word character that is not preceded by a vowel / functions I find useful / regex.test(\"hello\"); // returns true if found a match, false otherwise regex.exec(\"hello\"); // returns result array, null otherwise \"football\".replace(/foot/,\"basket\"); // replaces matches with second argument br --- br ## NODE / NPM br --- br h4 Check Version /h4 which node which npm node --version npm --version br --- br h4 Update to latest version /h4 sudo npm cache clean -f sudo npm install -g n sudo n stable br --- br h4 Global install packages /h4 npm install uglify-js --global br --- br h4 List global packages /h4 npm list --global npm list -g --depth=0 br --- br h4 Initialize project /h4 npm init br --- br h4 Local install packages devDependencies /h4 npm install should --save-dev br --- br h4 Local install packages dependencies /h4 npm install should --save br --- br h4 Uninstall packages /h4 npm uninstall underscore br --- br h4 Install specific version /h4 npm install underscore@1.8.2 br --- br h4 Check outdated packages /h4 npm outdated br --- br h4 Update packages /h4 npm update underscore br --- br h4 Quick Project Setup - React, Webpack, Babel, ESLint /h4 h4 Dependencies /h4 npm install --save react react-dom h4 Dev Dependencies /h4 npm install --save-dev babel-{core,loader} babel-preset-es2015 babel-preset-react babel-eslint css-loader node-sass sass-loader style-loader file-loader webpack webpack-dev-server eslint eslint-plugin-import eslint-plugin-react eslint-watch h4 NPM Scripts (package.json) /h4 \"scripts\": { \"start\": \"webpack-dev-server --progress --hot --inline\", \"build\": \"webpack\", \"lint\": \"esw webpack.config.js src\", \"lint:watch\": \"npm run lint -- --watch\", \"fix\": \"./node_modules/.bin/eslint src --fix\" }, h4 NVM: manage different versions of Node: /h4 $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash $ export NVM_DIR=\u201d$HOME/.nvm\u201d $ [ -s \u201c$NVM_DIR/nvm.sh\u201d ] . \u201c$NVM_DIR/nvm.sh\u201d $ [ -s \"$NVM_DIR/bash_completion\" ] . \"$NVM_DIR/bash_completion\" br --- br h4 Install a new version /h4 nvm install 8.9.4 br --- br h4 Show available versions of node /h4 nvm ls br --- br h4 Use a particular version /h4 nvm use 10.15.3 br --- br h4 Babel (.babelrc) /h4 { \"presets\": [ \"es2015\", \"react\" ] } br --- br h4 Move a module from devDependencies to dependencies /h4 npm install --save-prod or yarn remove --dev yarn add br --- br h4 Move a module from dependencies to devDependencies /h4 npm install --save-dev or yarn remove yarn add --dev br --- br ## WEBPACK Webpack is a static module bundler for modern JavaScript applications. It internally builds a dependency graph which maps every module your project needs and generates one or more bundles. Any time one file depends on another, webpack treats this as a dependency. Core Concepts: - Entry An entry point indicates which module webpack should use to begin building out its internal dependency graph. ```js module.exports = { entry: './path/to/my/entry/file.js' }; Output The output property tells webpack where to emit the bundles it creates and how to name these files. module.exports = { output: { filename: 'bundle.js', } }; Loaders Loaders allow webpack to process other types of files and convert them into modules. For example, you can use loaders to tell webpack to load a CSS file or to convert TypeScript to JavaScript. To do this, you would start by installing the loaders you need: npm install --save-dev css-loader npm install --save-dev ts-loader module.exports = { module: { rules: [ { test: /\\.css$/, use: 'css-loader' }, { test: /\\.ts$/, use: 'ts-loader' } ] } }; Plugins Plugins can be leveraged to perform a wider range of tasks like bundle optimization Since plugins can take arguments/options, you must pass a new instance to the plugins property in your webpack configuration. const HtmlWebpackPlugin = require('html-webpack-plugin'); //installed via npm const webpack = require('webpack'); //to access built-in plugins const path = require('path'); module.exports = { entry: './path/to/my/entry/file.js', output: { filename: 'my-first-webpack.bundle.js', path: path.resolve(__dirname, 'dist') }, module: { rules: [ { test: /\\.(js|jsx)$/, use: 'babel-loader' } ] }, plugins: [ new webpack.ProgressPlugin(), new HtmlWebpackPlugin({template: './src/index.html'}) ] }; Mode By setting the mode parameter to either development, production or none, you can enable webpack's built-in optimizations that correspond to each environment. Browser Compatibility Webpack supports all browsers that are ES5-compliant (IE8 and below are not supported). Webpack installation npm install --save-dev webpack Webpack Client npm install --save-dev webpack-cli Minimal webpack configuration file e.g. webpack.config.js var path = require('path'); module.exports = { mode: 'development', entry: './foo.js', output: { path: path.resolve(__dirname, 'dist'), filename: 'foo.bundle.js' } }; in package.json scripts : { build : webpack }, Webpack Performance codesplitting react-loadable npm install --save react-loadable import Loadable from 'react-loadable'; import Loading from '../../layout/Loading'; const ComponentName = Loadable({ loader: () = import(/* webpackChunkName: ComponentName */'./subcomponents/ComponentName'), loading: Loading }); in webpack.config.js output: { path: path.join(__dirname, 'app/static/bin'), filename: 'bundle.js', publicPath: '/static/bin/', chunkFilename: '[name].bundle.js', }, Performance improvements Webpack Plugin: UglifyWebpackPlugin minify js files (license MIT) uglifyjs-webpack-plugin Webpack Plugin: MomentLocalesPlugin remove unused locales from Moment (license MIT) moment-locales-webpack-plugin Webpack Plugin: BundleAnalyzerPlugin analyze build files (use http://127.0.0.1:8888 after running npm run-script build) (license MIT): Webpack Bundle Analyzer Babel Plugin: transform-imports import only needed modules (license ISC) babel-plugin-transform-imports Babel Plugin: transform-react-remove-prop-types Remove React propTypes from the production build, as they are only used in development. (license MIT) babel-plugin-transform-react-remove-prop-types webpack treeshaking npm run-script build -- --display-used-exports .babelrc transform imports npm install --save-dev babel-plugin-transform-imports in .babelrc { plugins : [ [ transform-imports , { react-bootstrap : { transform : react-bootstrap/lib/${member} , preventFullImport : true }, lodash : { transform : lodash/${member} , preventFullImport : true } }] ] } .eslintrc configuration module.exports = { parser : babel-eslint , extends : airbnb , env : { browser : true }, rules : { class-methods-use-this : off , react/sort-comp : off } }; Webpack (webpack.config.js) const path = require('path'); module.exports = { target: 'web', // Entry file where webpack starts the bundling process entry: path.resolve(__dirname, 'src/index.js'), // Location where bundled code will be saved output: { // Target directory for all output files path: path.resolve(__dirname, './dist'), // Name of each Output bundle file filename: bundle.js , }, // Webpack development server (config) devServer: { port: 9000, // Directory to serve content from contentBase: path.resolve(__dirname, './src'), // Automatically open browser when local server boots up open: true }, // Source Map setting devtool: inline-source-map , // Modules Loaders module: { rules: [ { test: /\\.js$/, loader: 'babel-loader', exclude: /node_modules/ }, { test: /\\.(jpe?g|png|gif)$/i, loader: 'file-loader', exclude: /node_modules/ }, { test: /(\\.css|\\.scss|\\.sass)$/, loaders: [ 'style-loader', 'css-loader', 'sass-loader' ] } ] } }; ESLint (.eslintrc.json) { root : true, extends : [ eslint:recommended , plugin:import/errors , plugin:import/warnings ], plugins : [ react ], parser : babel-eslint , parserOptions : { ecmaVersion : 7, sourceType : module , ecmaFeatures : { jsx : true } }, env : { es6 : true, browser : true, node : true, mocha : true }, rules : { quotes : 0, no-console : 1, no-debugger : 1, no-var : 1, semi : [1, always ], no-trailing-spaces : 1, eol-last : 0, no-unused-vars : 1, no-underscore-dangle : 0, no-alert : 0, no-lone-blocks : 0, no-multi-spaces : 1, jsx-quotes : 1, react/display-name : [ 1, { ignoreTranspilerName : false }], react/forbid-prop-types : [1, { forbid : [ any ]}], react/jsx-boolean-value : 1, react/jsx-closing-bracket-location : 1, react/jsx-curly-spacing : 1, } } Webpack setup2 -y takes the default npm init -y From root folder: mkdir dist cd dist touch index.html in dist/index.html !DOCTYPE html html head title The Minimal React Webpack Babel Setup /title /head body div id= app /div script src= ./bundle.js /script /body /html Install Webpack from root folder npm install --save-dev webpack webpack-dev-server webpack-cli Folder Structure - dist -- index.html - node_modules - package.json package.json scripts : { start : webpack-dev-server --config ./webpack.config.js --mode development , ... }, Create webpack configuration file touch webpack.config.js webpack config content module.exports = { entry: './src/index.js', output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, devServer: { contentBase: './dist' } }; Start Webpack dev server npm start Webpack enable sourcemap in webpack.config.js module.exports = { entry: path.join(__dirname, src , index.js ), devtool: 'source-map', output:........... BABEL Babel transpiles back to vanilla JavaScript so that every browser can interpret it. npm install --save-dev @babel/core @babel/preset-env hook it to webpack npm install --save-dev babel-loader JSX to javasript npm install --save-dev @babel/preset-react package.json keywords : [], author : , license : ISC , babel : { presets : [ @babel/preset-env , @babel/preset-react ] webpack.config.json module.exports = { entry: './src/index.js', module: { rules: [ { test: /\\.(js|jsx)$/, exclude: /node_modules/, use: ['babel-loader'] } ] }, resolve: { extensions: ['*', '.js', '.jsx'] }, output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, devServer: { contentBase: './dist' } }; Install packages for react npm install --save react react-dom src/index.js import React from 'react'; import ReactDOM from 'react-dom'; const title = 'My Minimal React Webpack Babel Setup'; ReactDOM.render( div {title} /div , document.getElementById('app') ); Hot Module Replacement in React apply changes to the browser npm install --save-dev react-hot-loader webpack.config.js const webpack = require('webpack'); module.exports = { entry: './src/index.js', module: { rules: [ { test: /\\.(js|jsx)$/, exclude: /node_modules/, use: ['babel-loader'] } ] }, resolve: { extensions: ['*', '.js', '.jsx'] }, output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, plugins: [ new webpack.HotModuleReplacementPlugin() ], devServer: { contentBase: './dist', hot: true } }; in src/index.js add at the end module.hot.accept(); npm start CURL SET SITE SITE=localhost:8096 TOKEN AUTHENTICATION TOKEN=`curl -v $SITE/api/v1/Sessions -d'{ UserName : Admin , Password : pass }' 2 1|sed -n 's/.*\\(X-Auth-Token:\\) /\\1/p'` echo $TOKEN BASIC AUTHENTICATION curl -v -uAdmin:pass $SITE/api/v1/ GET USERS curl -v -H$TOKEN $SITE/api/v1/Accounts/ POST curl -v -H$TOKEN $SITE/api/v1/Accounts/ -d'{ UserName : abcde , Password : edcba , RoleId : Operator }' |python -mjson.tool PATCH curl -v -X PATCH -H$TOKEN $SITE/api/v1/Accounts/abcde -d'{ Password : zyxwv }' |python -mjson.tool DELETE curl -v -X DELETE -H$TOKEN $SITE/api/v1/Accounts/abcde DOCKER Docker is a platform to develop, deploy, and run applications with containers. A container is launched by running an image. An image is an executable package that includes everything needed to run an application--the code, a runtime, libraries, environment variables, and configuration files. Example 1 create an application create a Dockerfile build an image create a container using a volume 1. create an application npm init -y npm install express\u200a\u2014-save app.js // app.js const express = require('express') const app = express() const port = 3000 app.get('/', (req, res) = res.send('Hello World!')) app.listen(port, () = console.log(`Example app listening on port ${port}!`)) run it node app.js 2. create a Dockerfile FROM node:latest WORKDIR /app COPY . . RUN npm install EXPOSE 3000 ENTRYPOINT [ node , app.js ] 3. build an image docker build -t mz2kh/node:latest . Show images docker images 4. create a container Create a container with docker run docker run mz2kh/node or docker run -p 8000:3000 chrisnoring/node Environment variable ENV PORT=3000 use in Dockerfile: EXPOSE $PORT use in Node.js process.env.PORT List containers docker ps Stop containers docker stop containerID Access contaienr shell interactively docker exec -it containerID bash Remove container docker rm containerID 5. using a Volume We want to be able to change or create files in our container so that when we pull it down and start it up again our changes will still be there. create a volume docker volume create [name of volume] volumes list docker volume ls remove all not used volumes docker volume prune remove a single volume docker volume rm [name of volume] get more information about a volume docker inspect [name of volume] Mounting a volume Syntax options: --volume (-v [name of volume]:[directory in the container]) or --mount (--mount source=[name of volume], target=[directory in container]) Usage in conjunction with run container docker run -d -p 8000:3000 --name my-container --volume my-volume:/logs mz2kh/node Locate our volume inside of our container, and navigate to logs/ directory docker exec -it my-container bash Run container with subdirectory docker run -d -p 8000:3000 --name my-container --volume $(pwd)/logs:/logs mz2kh/node access container and check folder cd ../logs/ docker exec -it my-container bash tear down the container docker kill my-container docker rm my-container Make the entire project directory as a volume npm install --save-dev nodemon docker run -d -p 8000:3000 --name my-container --volume $(pwd):/app mz2kh/node in package.json add scripts : { start : nodemon app.js , log : echo \\ Logging something to screen\\ } in Dockerfile change entrypoint to: ENTRYPOINT [ npm , start ] rebuild the image docker build -t mz2kh/node . bring up our container docker run -d -p 8000:3000 --name my-container --volume $(PWD):/app mz2kh/node Example 2 Develop a new project which involves both a Node backend and a React front-end in Docker containers. - Run both the Node and the React app in its own Docker container. - Communicate between the two apps running in containers. - Every edit in the local IDE will automatically be reflected in the apps running in containers. Create a repository with a backend and frontend folder Add outside both folders a docker-compose.yml file to build and spin up the two containers Add a .env file providing default values of environment variables for both apps. Add a Dockerfile in the client folder and also one in the server folder For Client # base image FROM node:latest # set working directory RUN mkdir -p /usr/src/appclient WORKDIR /usr/src/appclient # install dependencies COPY package.json /usr/src/appclient COPY package-lock.json /usr/src/appclient RUN npm install COPY . /usr/src/appclient # start app CMD [ npm , start ] For Server # base image FROM node:8.7.0-alpine # set working directory RUN mkdir -p /usr/src/appserver WORKDIR /usr/src/appserver # install dependencies COPY package.json /usr/src/appserver COPY package-lock.json /usr/src/appserver RUN npm install COPY . /usr/src/appserver # start app CMD [ npm , run , dev ] a. FROM node:8.7.0-alpine Tell Docker we want to use Node v8.7.0 installed in a alpine Linux image. b. RUN mkdir -p /app/directory/path Create a directory in the container to hold the app. c. WORKDIR /app/directory/path Go into the app folder by making it the working directory d. COPY package.json and COPY package-lock.json Copy the local package.json and package-lock.json files into the container e. RUN npm install install the node modules that the project needs f. COPY . /app/directory/path Copy local code into the container g. CMD [\"npm\", \"start\"] Now our app lives in the container, we can run the command npm start. e. The Dockerfile in the server folder is nearly the same, except that in the last line the command to run is npm run dev , which is an npm script defined in the package.json file that starts the Node app using nodemon instead of node to trigger recompiling the app server every time I edit something in the local server source code. Create the docker-compose.yml file This will make the two containers communicative. version: '3.5' services: ################################ # Setup node container ################################ server: build: ./server espose: - ${APP_SERVER_PORT} environment: API_HOST: ${API_HOST} APP_SERVER_PORT: ${APP_SERVER_PORT} ports: - ${APP_SERVER_PORT}:${APP_SERVER_PORT} volumes: - ./server/src:/srv/appserver/src command: npm run dev ################################ # Setup client container ################################ client: build: ./client environment: REACT_APP_PORT: ${REACT_APP_PORT} espose: - ${REACT_APP_PORT} ports: - ${REACT_APP_PORT}:${REACT_APP_PORT} volumes: - ./client/src:/srv/appclient/src links: - server command: npm run start Variables are defined in an external files .env: API_HOST= http://localhost:3000 APP_SERVER_PORT=8000 REACT_APP_PORT=4000 a. ports: Then we map container port to a port on the host machine so that we can access the running containers from the local environment b. volumes: Mounting volumes enables us to map local source code to the corresponding code in the container, so that every time we edit these code files in our local IDE the changes will be instantly reflected in the container. c. command: The command to run after the container is up. What\u2019s specified here will override the CMD part in the Dockerfile. DEVOPS DevOps is a combination of practices, and tools that increases an organization\u2019s ability to deliver applications and services at high velocity to better serve their customers and compete more effectively in the market. These practices are used to automate processes that historically have been manual and slow. They use a technology stack and tooling which help them operate and evolve applications quickly and reliably. Benefits of DevOps For example, microservices and continuous delivery let teams take ownership of services and then release updates to them quicker. Increase the frequency and pace of releases so you can innovate and improve your product faster. Continuous integration and continuous delivery are practices that automate the software release process, from build to deploy. Reliability Ensure the quality of application updates and infrastructure. Test that each change is functional and safe. Monitoring and logging practices help you stay informed of performance in real-time. Scale Operate and manage your infrastructure and development processes at scale. Automation and consistency. Software and the Internet have transformed the world and its industries, from shopping to entertainment to banking. Software no longer merely supports a business; rather it becomes an integral component of every part of a business. There are a few key practices that help organizations innovate faster through automating and streamlining the software development and infrastructure management processes. Most of these practices are accomplished with proper tooling. One fundamental practice is to perform very frequent but small updates. This is how organizations innovate faster for their customers. These updates are usually more incremental in nature than the occasional updates performed under traditional release practices. Organizations might also use a microservices architecture to make their applications more flexible and enable quicker innovation. The microservices architecture decouples large, complex systems into simple, independent projects. Applications are broken into many individual components (services). However, the combination of microservices and increased release frequency leads to significantly more deployments which can present operational challenges. Thus, DevOps practices like continuous integration and continuous delivery solve these issues and let organizations deliver rapidly in a safe and reliable manner. Infrastructure automation practices, like infrastructure as code and configuration management, help to keep computing resources elastic and responsive to frequent changes. In addition, the use of monitoring and logging helps engineers track the performance of applications and infrastructure so they can react quickly to problems. The following are DevOps best practices: Continuous Integration Continuous Delivery Microservices Infrastructure as Code Monitoring and Logging Communication and Collaboration Below you can learn more about each particular practice. Continuous Integration VSCODE Debug code through Chrome Debugger extension Launch VS Code Quick Open (Ctrl+P), paste the following command, and press enter. ext install msjsdiag.debugger-for-chrome Create a launch file for the Visual Studio Code Debugger. Click gear icon on debug section (Ctr+Shift+D). Select option \"Chrome\" Insert a configuration file Insert url, root, name { version : 0.2.0 , configurations : [ { type : chrome , request : launch , name : Launch Chrome against localhost , url : http://127.0.0.1:8887 , webRoot : ${workspaceFolder} } ] } Add breakpoints in VS Code, by click on the left of row number Press F5 to start debugging A new chrome window will open In VS Code Open debug panel ctlr+shift+D Press F10 for step over Press F11 for step into Press shift + F11 for step out Press F6 for pause Create Snippet ctrl+shift+p Preferences: Configure User Snippets Select Javascript ''' { \"Console Log\": { \"prefix\": \"xcl\", \"body\": [, \"renderA() {}\", \"renderB() {}\", ], \"description\": \"render() {}\" } } ''' type \"xcl\" to use it Snippet Generator OTHER TOOLS Jenkins Jenkins is a cross-platform, continuous integration and continuous delivery application. Use Jenkins to build and test your software projects continuously. It provides powerful ways to define your build pipelines and integrating with testing and deployment technologies. build test deploy it is the most common pattern Jenkins is a continuous integration server. Integration tests take all the code and other components of your application and integrate it together, then test it to ensure it's working properly. Jenkins can watch repos for version control software like Git or Subversion. When there's a new commit, Jenkins will check it out automatically. It will run your tests, and report the result. It can even be configured to automatically deploy your software to production if all the tests pass. A Jenkins pipeline delivers your software to a testing, staging, or production environment. When creating a pipeline, you specify the steps Jenkins needs to follow. Anytime a build is triggered, Jenkins will follow those steps to deliver your code where it needs to go. Pipeline scripts use a domain-specific language based on the Groovy programming language. They start with the pipeline keyword, followed by a block in curly braces ({}). The components of the pipeline are nested within that block. We'll look at the agent and stages declarations later in the course; pipeline { agent any stages { stage('My Stage') { steps { sh 'pwd' // If you're on Windows, use this line instead: // bat 'cd' sh 'whoami' // If you're on Windows, use this line instead: // bat 'whoami' sh 'mkdir newfolder' // If you're on Windows, use this line instead: // bat 'mkdir newfolder' sh 'ls' // If you're on Windows, use this line instead: // bat 'dir' } } } } Save your changes, return to the pipeline screen, and click \"Build Now\" in the left-hand menu. A new build will appear in the \"Build History\" area; click it and open its \"Console Output\". You'll see something like the following: Started by user Jay McGavren Running in Durability level: MAX_SURVIVABILITY [Pipeline] Start of Pipeline [Pipeline] node Running on Jenkins in /Users/jay/.jenkins/workspace/Shell Pipeline [Pipeline] { [Pipeline] stage [Pipeline] { (My Stage) [Pipeline] sh + pwd /Users/jay/.jenkins/workspace/Shell Pipeline [Pipeline] sh + whoami jay [Pipeline] sh + mkdir newfolder [Pipeline] sh + ls newfolder [Pipeline] } [Pipeline] // stage [Pipeline] } [Pipeline] // node [Pipeline] End of Pipeline Finished: SUCCESS With Docker, your compiler, database, and everything else your app needs can be installed in a docker image. Then, Jenkins can launch a Docker container based on that image, and run all your sh or bat steps within the container. You can be certain that all of your app's dependencies are installed correctly, and there's no need to clutter the Jenkins server. BASH 192 cd ~/ 193 pwd 194 ls 195 ls -la 196 touch .bash_profile 197 export PATH=$PATH:/home/matteo/bin 198 cd bin 199 touch hello-world 200 vim hello-world 201 which bash 202 vim hello-world 203 chmod u+x hello-world 204 hello-world 205 vim hello-world 206 hello-world 207 vim hello-world 208 hello-world 209 vim hello-world 210 hello-world 211 vim hello-world 212 hello-world 213 vim hello-world 214 hello-world 215 vim hello-world 216 hello-world 217 vim hello-world 218 hello-world 219 vim hello-world 220 hello-world 221 vim hello-world 222 history example #!/bin/bash who='You!' echo write name: read whoami echo Hello, World!, $who! $whoami echo write number read age if [ $age -gt 20 ] then echo You can drink. else echo You are too young to drink. fi FILES=/home/matteo/* for file in $FILES do echo $(basename $file) done read -r -p 'Commit message: ' desc # prompt user for commit message git add . # track all files git add -u # track deletes git commit -m $desc # commit with message git push origin master # push to origin LINKS React Awesome-react React Learning Roadmap FreeCodeCamp: React Cocepts Creativebloq: React Tips React Various articles Flavio Copes Articles about frontend Frontend Articles Frontend Articles Hooks collection 30 seconds react CSS Links CSSreference.io Jen Simmons CSS Lab BEM Block Element Modifier CSS Animation CSS grids Grids by example Grid CSS Garden Grid CSS Tricks Flexbox CSS Tricks Flexbox Grid GIT GIT commands Linux Linux commands Docker Docker","title":"TOOLS"},{"location":"#tools","text":"","title":"TOOLS"},{"location":"#git","text":"","title":"GIT"},{"location":"#linux-tips","text":"","title":"LINUX TIPS"},{"location":"#babel","text":"Babel transpiles back to vanilla JavaScript so that every browser can interpret it. npm install --save-dev @babel/core @babel/preset-env hook it to webpack npm install --save-dev babel-loader JSX to javasript npm install --save-dev @babel/preset-react package.json keywords : [], author : , license : ISC , babel : { presets : [ @babel/preset-env , @babel/preset-react ] webpack.config.json module.exports = { entry: './src/index.js', module: { rules: [ { test: /\\.(js|jsx)$/, exclude: /node_modules/, use: ['babel-loader'] } ] }, resolve: { extensions: ['*', '.js', '.jsx'] }, output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, devServer: { contentBase: './dist' } }; Install packages for react npm install --save react react-dom src/index.js import React from 'react'; import ReactDOM from 'react-dom'; const title = 'My Minimal React Webpack Babel Setup'; ReactDOM.render( div {title} /div , document.getElementById('app') ); Hot Module Replacement in React apply changes to the browser npm install --save-dev react-hot-loader webpack.config.js const webpack = require('webpack'); module.exports = { entry: './src/index.js', module: { rules: [ { test: /\\.(js|jsx)$/, exclude: /node_modules/, use: ['babel-loader'] } ] }, resolve: { extensions: ['*', '.js', '.jsx'] }, output: { path: __dirname + '/dist', publicPath: '/', filename: 'bundle.js' }, plugins: [ new webpack.HotModuleReplacementPlugin() ], devServer: { contentBase: './dist', hot: true } }; in src/index.js add at the end module.hot.accept(); npm start","title":"BABEL"},{"location":"#curl","text":"","title":"CURL"},{"location":"#docker","text":"Docker is a platform to develop, deploy, and run applications with containers. A container is launched by running an image. An image is an executable package that includes everything needed to run an application--the code, a runtime, libraries, environment variables, and configuration files.","title":"DOCKER"},{"location":"#devops","text":"DevOps is a combination of practices, and tools that increases an organization\u2019s ability to deliver applications and services at high velocity to better serve their customers and compete more effectively in the market. These practices are used to automate processes that historically have been manual and slow. They use a technology stack and tooling which help them operate and evolve applications quickly and reliably. Benefits of DevOps For example, microservices and continuous delivery let teams take ownership of services and then release updates to them quicker. Increase the frequency and pace of releases so you can innovate and improve your product faster. Continuous integration and continuous delivery are practices that automate the software release process, from build to deploy. Reliability Ensure the quality of application updates and infrastructure. Test that each change is functional and safe. Monitoring and logging practices help you stay informed of performance in real-time. Scale Operate and manage your infrastructure and development processes at scale. Automation and consistency. Software and the Internet have transformed the world and its industries, from shopping to entertainment to banking. Software no longer merely supports a business; rather it becomes an integral component of every part of a business. There are a few key practices that help organizations innovate faster through automating and streamlining the software development and infrastructure management processes. Most of these practices are accomplished with proper tooling. One fundamental practice is to perform very frequent but small updates. This is how organizations innovate faster for their customers. These updates are usually more incremental in nature than the occasional updates performed under traditional release practices. Organizations might also use a microservices architecture to make their applications more flexible and enable quicker innovation. The microservices architecture decouples large, complex systems into simple, independent projects. Applications are broken into many individual components (services). However, the combination of microservices and increased release frequency leads to significantly more deployments which can present operational challenges. Thus, DevOps practices like continuous integration and continuous delivery solve these issues and let organizations deliver rapidly in a safe and reliable manner. Infrastructure automation practices, like infrastructure as code and configuration management, help to keep computing resources elastic and responsive to frequent changes. In addition, the use of monitoring and logging helps engineers track the performance of applications and infrastructure so they can react quickly to problems. The following are DevOps best practices: Continuous Integration Continuous Delivery Microservices Infrastructure as Code Monitoring and Logging Communication and Collaboration Below you can learn more about each particular practice. Continuous Integration","title":"DEVOPS"},{"location":"#vscode","text":"","title":"VSCODE"},{"location":"#other-tools","text":"","title":"OTHER TOOLS"},{"location":"#bash","text":"192 cd ~/ 193 pwd 194 ls 195 ls -la 196 touch .bash_profile 197 export PATH=$PATH:/home/matteo/bin 198 cd bin 199 touch hello-world 200 vim hello-world 201 which bash 202 vim hello-world 203 chmod u+x hello-world 204 hello-world 205 vim hello-world 206 hello-world 207 vim hello-world 208 hello-world 209 vim hello-world 210 hello-world 211 vim hello-world 212 hello-world 213 vim hello-world 214 hello-world 215 vim hello-world 216 hello-world 217 vim hello-world 218 hello-world 219 vim hello-world 220 hello-world 221 vim hello-world 222 history example #!/bin/bash who='You!' echo write name: read whoami echo Hello, World!, $who! $whoami echo write number read age if [ $age -gt 20 ] then echo You can drink. else echo You are too young to drink. fi FILES=/home/matteo/* for file in $FILES do echo $(basename $file) done read -r -p 'Commit message: ' desc # prompt user for commit message git add . # track all files git add -u # track deletes git commit -m $desc # commit with message git push origin master # push to origin","title":"BASH"},{"location":"#links","text":"React Awesome-react React Learning Roadmap FreeCodeCamp: React Cocepts Creativebloq: React Tips React Various articles Flavio Copes Articles about frontend Frontend Articles Frontend Articles Hooks collection 30 seconds react CSS Links CSSreference.io Jen Simmons CSS Lab BEM Block Element Modifier CSS Animation CSS grids Grids by example Grid CSS Garden Grid CSS Tricks Flexbox CSS Tricks Flexbox Grid GIT GIT commands Linux Linux commands Docker Docker","title":"LINKS"},{"location":"backend/","text":"BACKEND PYTHON Byte code compilation Python compiles sourcecode into a format called bytecode. Compilation is simply a translation step, and byte code is a lower-level, and platform-independent,representation of your source code. This byte code translation is performed to speed execution. byte code it is executed to something called Python Virtual Machine. PVM iterates through bytecode. It is the runtime engine of Python; it\u2019s always present as part of the Python system, and is the component that truly runs your scripts. Technically, it\u2019s just the last step of what is called the Python interpreter. Main Python main function is executed only when it\u2019s being executed as a python program. We can also import a python program as a module, in that case python main method should not execute. import sys print( Hello ) print( __name__ value: , __name__) def main(): print( python main function ) if __name__ == '__main__': print sys.argv main() It is going to print: Hello ('__name__ value: ', '__main__') ['prova.py', 'start'] python main function Imports On imports the first thing Python will do is look up the name abc in sys.modules. This is a cache of all modules that have been previously imported. Python will proceed to search through a list of built-in modules. pre-installed with Python and can be found in the Python Standard Library. Python then searches for it in a list of directories defined by sys.path. This list usually includes the current directory, which is searched first. import the resource directly import abc import the resource from another package or module from abc import xyz from flask import Flask, request rename an imported resource import abc as other_name List of available Modules From python shell: help() type \"modules\", \"keywords\", or \"topics\" modules Get information about a specific module: sys Built-in datatypes Numbers Strings Lists and Dictionaries Tuples, Files... Strings String Methods capitalize() - Returns the string with first letter capitalized and the rest lowercased. casefold() - Returns a lowercase string, generally used for caseless matching. This is more aggressive than the lower() method. center() - Center the string within the specified width with optional fill character. count() - Count the non-overlapping occurrence of supplied substring in the string. encode() - Return the encoded version of the string as a bytes object. endswith() - Returns ture if the string ends with the supplied substring. expandtabs() - Return a string where all the tab characters are replaced by the supplied number of spaces. find() - Return the index of the first occurrence of supplied substring in the string. Return -1 if not found. format() - Format the given string. format_map() - Format the given string. index() - Return the index of the first occurrence of supplied substring in the string. Raise ValueError if not found. isalnum() - Return true if the string is non-empty and all characters are alphanumeric. isalpha() - Return true if the string is non-empty and all characters are alphabetic. isdecimal() - Return true if the string is non-empty and all characters are decimal characters. isdigit() - Return true if the string is non-empty and all characters are digits. isidentifier() - Return true if the string is a valid identifier. islower() - Return true if the string has all lowercased characters and at least one is cased character. isnumeric() - Return true if the string is non-empty and all characters are numeric. isprintable() - Return true if the string is empty or all characters are printable. isspace() - Return true if the string is non-empty and all characters are whitespaces. istitle() - Return true if the string is non-empty and titlecased. isupper() - Return true if the string has all uppercased characters and at least one is cased character. join() - Concatenate strings in the provided iterable with separator between them being the string providing this method. ljust() - Left justify the string in the provided width with optional fill characters. lower() - Return a copy of all lowercased string. lstrip() - Return a string with provided leading characters removed. maketrans() - Return a translation table. partition() - Partition the string at first occurrence of substring (separator) and return a 3-tuple with part before separator, the separator and part after separator. replace() - Replace all old substrings with new substrings. rfind() - Return the index of the last occurrence of supplied substring in the string. Return -1 if not found. rindex() - Return the index of the last occurrence of supplied substring in the string. Raise ValueError if not found. rjust() - Right justify the string in the provided width with optional fill characters. rpartition() - Partition the string at last occurrence of substring (separator) and return a 3-tuple with part before separator, the separator and part after separator. rsplit() - Return a list of words delimited by the provided subtring. If maximum number of split is specified, it is done from the right. rstrip() - Return a string with provided trailing characters removed. split() - Return a list of words delimited by the provided subtring. If maximum number of split is specified, it is done from the left. splitlines() - Return a list of lines in the string. startswith() - Return true if the string starts with the provided substring. strip() - Return a string with provided leading and trailing characters removed. swapcase() - Return a string with lowercase characters converted to uppercase and vice versa. title() - Return a title (first character of each word capitalized, others lowercased) cased string. translate() - Return a copy of string that has been mapped according to the provided map. upper() - Return a copy of all uppercased string. zfill() - Return a numeric string left filled with zeros in the provided width. Lists List methods append() - Add an element to the end of the list extend() - Add all elements of a list to the another list insert() - Insert an item at the defined index remove() - Removes an item from the list pop() - Removes and returns an element at the given index clear() - Removes all items from the list index() - Returns the index of the first matched item count() - Returns the count of number of items passed as an argument sort() - Sort items in a list in ascending order reverse() - Reverse the order of items in the list copy() - Returns a shallow copy of the list List comprehension pow2 = [2 ** x for x in range(10)] # Output: [1, 2, 4, 8, 16, 32, 64, 128, 256, 512] print(pow2) # Equivalent to pow2 = [] for x in range(10): pow2.append(2 ** x) built-in functions list all() Return True if all elements of the list are true (or if the list is empty). any() Return True if any element of the list is true. If the list is empty, return False. enumerate() Return an enumerate object. It contains the index and value of all the items of list as a tuple. len() Return the length (the number of items) in the list. list() Convert an iterable (tuple, string, set, dictionary) to a list. max() Return the largest item in the list. min() Return the smallest item in the list sorted() Return a new sorted list (does not sort the list itself). sum() Return the sum of all elements in the list. Tuples The difference between the two is that we cannot change the elements of a tuple once it is assigned # tuple having integers # Output: (1, 2, 3) my_tuple = (1, 2, 3) print(my_tuple) Dictionaries Python dictionary is an unordered collection of items. While other compound data types have only value as an element, a dictionary has a key: value pair. # empty dictionary my_dict = {} # dictionary with integer keys my_dict = {1: 'apple', 2: 'ball'} # dictionary with mixed keys my_dict = {'name': 'John', 1: [2, 4, 3]} # using dict() my_dict = dict({1:'apple', 2:'ball'}) # from sequence having each item as a pair my_dict = dict([(1,'apple'), (2,'ball')]) Access elements from a dictionary my_dict = {'name':'Jack', 'age': 26} # Output: Jack print(my_dict['name']) # Output: 26 print(my_dict.get('age')) Update/Add my_dict = {'name':'Jack', 'age': 26} # update value my_dict['age'] = 27 #Output: {'age': 27, 'name': 'Jack'} print(my_dict) # add item my_dict['address'] = 'Downtown' # Output: {'address': 'Downtown', 'age': 27, 'name': 'Jack'} print(my_dict) Delete/Removes # create a dictionary squares = {1:1, 2:4, 3:9, 4:16, 5:25} # remove a particular item # Output: 16 print(squares.pop(4)) # Output: {1: 1, 2: 4, 3: 9, 5: 25} print(squares) # remove an arbitrary item # Output: (1, 1) print(squares.popitem()) # Output: {2: 4, 3: 9, 5: 25} print(squares) # delete a particular item del squares[5] # Output: {2: 4, 3: 9} print(squares) # remove all items squares.clear() # Output: {} print(squares) # delete the dictionary itself del squares # Throws Error # print(squares) Dictionaries methods clear() Remove all items form the dictionary. copy() Return a shallow copy of the dictionary. fromkeys(seq[, v]) Return a new dictionary with keys from seq and value equal to v (defaults to None). get(key[,d]) Return the value of key. If key doesnot exit, return d (defaults to None). items() Return a new view of the dictionary's items (key, value). keys() Return a new view of the dictionary's keys. pop(key[,d]) Remove the item with key and return its value or d if key is not found. If d is not provided and key is not found, raises KeyError. popitem() Remove and return an arbitary item (key, value). Raises KeyError if the dictionary is empty. setdefault(key[,d]) If key is in the dictionary, return its value. If not, insert key with a value of d and return d (defaults to None). update([other]) Update the dictionary with the key/value pairs from other, overwriting existing keys. values() Return a new view of the dictionary's values Loop dict and get selected attributes events = [{action: 'aaa', type: 'bbb'}, {action: 'addaa', type: 'ddbbb'}] ret = [{'action': ev['action'], 'type': ev['type']} for ev in events] Sets A set is an unordered collection of items. Every element is unique (no duplicates) and must be immutable (which cannot be changed). However, the set itself is mutable. We can add or remove items from it. # initialize my_set my_set = {1, 3, 4, 5, 6} print(my_set) sets methods add() Adds an element to the set clear() Removes all elements from the set copy() Returns a copy of the set difference() Returns the difference of two or more sets as a new set difference_update() Removes all elements of another set from this set discard() Removes an element from the set if it is a member. (Do nothing if the element is not in set) intersection() Returns the intersection of two sets as a new set intersection_update() Updates the set with the intersection of itself and another isdisjoint() Returns True if two sets have a null intersection issubset() Returns True if another set contains this set issuperset() Returns True if this set contains another set pop() Removes and returns an arbitary set element. Raise KeyError if the set is empty remove() Removes an element from the set. If the element is not a member, raise a KeyError symmetric_difference() Returns the symmetric difference of two sets as a new set symmetric_difference_update() Updates a set with the symmetric difference of itself and another union() Returns the union of sets in a new set update() Updates the set with the union of itself and others Get minimum/max/sort value from a dictionary prices = { 'shows': 41, 'tshirts': 55, 'gloves': 22, 'hats': 11 } min_price = min(zip(prices.values(), prices.keys())) max_price = max(zip(prices.values(), prices.keys())) prices_sorted = sorted(zip(prices.values(), prices.keys())) Given two dictionaries # Find keys in common a.keys() b.keys() # Find keys in a that are not in b a.keys() - b.keys() # Find (key,value) pairs in common a.items() b.items() # Make a new dictionary with certain keys removed c = {key:a[key] for key in a.keys() - {'z', 'w'}} # Make a dictionary of all prices over 200 p1 = { key:value for key, value in prices.items() if value 200 } # Make a dictionary of tech stocks tech_names = { 'AA', 'BB', 'CC', 'DD' } p2 = { key:value for key,value in prices.items() if key in tech_names } https://d.cxcore.net/Python/Python_Cookbook_3rd_Edition.pdf Lambda functions Keyword lambda in python is used to create anonymous functions. lambda arguments: expression same as: def functionName( arguments ): statements... return something example: def squareof(x): return x*x p = squareof(5) print(p) example with filter: weekdays = ['sun', 'mon', 'tues', 'wed', 'thurs' 'fri'] days = filter(lambda day: day if len(day)==3 else '', weekdays) for d in days: print(d) example with map: numbers = [ 74, 85, 14, 23, 56, 31,44 ] remainders = map(lambda num: num%5, numbers) for i in remainders: print(i) Python Inheritance class Person: name = age = 0 def __init__(self, personName, personAge): self.name = personName self.age = personAge def showName(self): print(self.name) def showAge(self): print(self.age) class Student(Person): studentId = def __init__(self, studentName, studentAge, studentId): Person.__init__(self, studentName, studentAge) self.studentId = studentId def getId(self): return self.studentId person1 = Person( Richard , 23) person1.showAge() student1 = Student( Max , 22, 102 ) print(student1.getId()) student1.showName() Logging in Python Logging is a way of tracking events in a program when it runs and is in execution. import logging # Configure file logging.basicConfig(filename='my_logs.log', filemode='w', format='%(levelname)s - %(asctime)s: %(message)s', level=logging.DEBUG) logger = logging.getLogger(__name__) logger.info( Using custom logger. ) shubham = {'name': 'Shubham', 'roll': 123} logger.debug( Shubham: %s , shubham) Daemon A daemon is a process that runs in the background. A daemon thread will shut down immediately when the program exits. If a program is running Threads that are not daemons, then the program will wait for those threads to complete before it terminates. Threads that are daemons, however, are just killed wherever they are when the program is exiting. Thread A process is an instance of program. Processes spawn threads (sub-processes) to handle subtasks. Threads live inside processes and share the same memory space. Python threading allows you to have different parts of your program run concurrently. GIL essentially limit one Python thread to run at a time. Tasks that spend much of their time waiting for external events are generally good candidates for threading. Problems that require heavy CPU computation and spend little time waiting for external events might not run faster at all. import time from threading import Thread def sleepMe(i): print( Thread %i sleep for 5 seconds. % i) time.sleep(5) print( Thread %i is awake now. % i) for i in range(10): th = Thread(target=sleepMe, args=(i, )) th.start() print( Current Thread count: %i. % threading.active_count()) example 2 with logging: import logging import threading import time def thread_function(name): logging.info( Thread %s: starting , name) time.sleep(2) logging.info( Thread %s: finishing , name) if __name__ == __main__ : format = %(asctime)s: %(message)s logging.basicConfig(format=format, level=logging.INFO, datefmt= %H:%M:%S ) logging.info( Main : before creating thread ) x = threading.Thread(target=thread_function, args=(1,)) logging.info( Main : before running thread ) x.start() logging.info( Main : wait for the thread to finish ) # x.join() logging.info( Main : all done ) REST API Examples using Flask @app.route('/accounts', methods=['GET']) @authorization_required('Login') Return a list of accounts. **Example request**: .. sourcecode:: http GET /accounts HTTP/1.1 Host: localhost Accept: application/json **Example response**: .. sourcecode:: http HTTP/1.1 200 OK Vary: Accept Content-Type: application/json [ { role : Administrator , username : Admin }, { role : operator , username : accountA } ] :resheader Content-Type: application/json :reqheader Authorization: OAuth token to authenticate :status 200: Accounts Found return json.dumps(app.accounts_manager.get_accounts()) creating your application using a function. This allows you to pass in different configuration settings. from flask import Flask from sqlalchemy import create_engine from myapp import config from myapp.views import frontend def create_app(database_uri, debug=False): app = Flask(__name__) app.debug = debug # set up your database app.engine = create_engine(database_uri) # add your modules app.register_module(frontend) # other setup tasks return app Main if __name__ == __main__ : app = create_app(config.DATABASE_URI, debug=True) app.run() NODE About Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications. Features of Node.js Asynchronous and Event Driven Fast: based on Google Chrome's V8 JavaScript Engine Single Threaded but scalable: Event mechanism helps the server to respond in a non-blocking way No buffering Node components A Node.js application consists of the following three components: Import required modules: Use the require directive to load Node.js modules. Create server: A server which will listen to client's requests similar to Apache HTTP Server. Read request and return response: Read the HTTP request made by the client which can be a browser or a console and return the response. Node application 'Hello World' Import required module: var http = require( http ); Create Server main.js http.createServer(function (request, response) { // Send the HTTP header // HTTP Status: 200 : OK // Content Type: text/plain response.writeHead(200, {'Content-Type': 'text/plain'}); // Send the response body response.end('Hello World\\n'); }).listen(8081); // Console print the message console.log('Server running at http://127.0.0.1:8081/'); Run it node main.js REPL stands for Read Eval Print Loop REPL stands for Read Eval Print Loop. it represents a computer environment like a Windows console or Unix/Linux shell where a command is entered and the system responds with an output in an interactive mode. REPL can be started by simply running node on shell/console. NPM node package manager Online repositories for node.js Command line utility to install Node.js packages Install Modules using npm npm install Module Name install express npm install express use it as follow: var express = require('express'); other commands npm uninstall express npm update express npm search express Callback function A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All the APIs of Node are written in such a way that they support callbacks. var fs = require( fs ); fs.readFile('input.txt', function (err, data) { if (err) return console.error(err); console.log(data.toString()); }); console.log( Program Ended ); Streams Streams are objects that let you continuosly read data. There are 4 types of stream: - Readable - Writable - Duplex - Trasform example var fs = require( fs ); var data = ''; // Readable stream var readerStream = fs.createReadStream('input.txt'); // Encoding to be utf8. readerStream.setEncoding('UTF8'); // Stream events readerStream.on('data', function(chunk) { data += chunk; }); readerStream.on('end',function() { console.log(data); }); readerStream.on('error', function(err) { console.log(err.stack); }); console.log( End ); Modules Utility modules: - OS Module - Path Module - Net Module - DNS Module - Domain Module Events driven Whenever an event gets fired, its listener function starts executing. EventEmitter class which is used to bind events and event-listeners. Any async function accepts a callback as the last parameter and a callback function accepts an error as the first parameter. // Import events module var events = require('events'); // Create an eventEmitter object var eventEmitter = new events.EventEmitter(); // Bind event and event handler as follows eventEmitter.on('eventName', eventHandler); // Fire an event eventEmitter.emit('eventName'); EventEmitter // Import events module var events = require('events'); // Create an eventEmitter object var eventEmitter = new events.EventEmitter(); Methods addListener(event, listener) on(event, listener) once(event, listener) removeListener(event, listener) removeAllListeners([event]) setMaxListeners(n) listeners(event) emit(event, [arg1], [arg2], [...]) Class Methods listenerCount(emitter, event) Events newListener removeListener var events = require('events'); var eventEmitter = new events.EventEmitter(); // listener #1 var listner1 = function listner1() { console.log('listner1 executed.'); } // listener #2 var listner2 = function listner2() { console.log('listner2 executed.'); } // Bind the connection event with the listner1 function eventEmitter.addListener('connection', listner1); // Bind the connection event with the listner2 function eventEmitter.on('connection', listner2); var eventListeners = require('events').EventEmitter.listenerCount (eventEmitter,'connection'); console.log(eventListeners + Listner(s) listening to connection event ); // Fire the connection event eventEmitter.emit('connection'); // Remove the binding of listner1 function eventEmitter.removeListener('connection', listner1); console.log( Listner1 will not listen now. ); // Fire the connection event eventEmitter.emit('connection'); eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'connection'); console.log(eventListeners + Listner(s) listening to connection event ); console.log( Program Ended. ); node main.js Express Express is a minimal Node.js web application framework. Allows to set up middlewares to respond to HTTP Requests. Defines a routing table which is used to perform different actions based on HTTP Method and URL. Allows to dynamically render HTML Pages based on passing arguments to templates. Install Express npm install express --save Other important modules: body-parser \u2212 middleware for handling JSON, Raw, Text and URL encoded form data. cookie-parser \u2212 Parse Cookie header multer \u2212 This is a node.js middleware for handling multipart/form-data. $ npm install body-parser --save $ npm install cookie-parser --save $ npm install multer --save Express example: var express = require('express'); var app = express(); app.get('/', function (req, res) { res.send('Hello World'); }) var server = app.listen(8081, function () { var host = server.address().address var port = server.address().port console.log( Example app listening at http://%s:%s , host, port) }) Run it node server.js GET/POST a list of users from a JSON file: var express = require('express'); var app = express(); var fs = require( fs ); app.get('/users', function (req, res) { fs.readFile( __dirname + / + users.json , 'utf8', function (err, data) { console.log( data ); res.end( data ); }); }) app.post('/users', function (req, res) { console.log(req.body) res.status(200).end() }) var server = app.listen(8081, function () { var host = server.address().address var port = server.address().port console.log( Example app listening at http://%s:%s , host, port) }) Express Middleware - It is applied between a request and a response - Execute functions on incoming requests - Good for authentication, transforming request, tracking, error handling Middleware const log = (req, res, next) = { console.log('testing'); next() } Middleware log running for a single function app.get('/users', log, function (req, res) { res.send({ data: [1, 2, 3] }) }) Middleware log running for all endpoints app.use(log); Calling Array of Middleware app.get('/users', [log, log, log], function (req, res) { res.send({ data: [1, 2, 3] }) }) Routes - Matching system by regex, exact, glob, parameters - It supports HTTP verbs on route based level - Routes match in the order they are defined - Express allows to create subroutes Declaring a router const router = express.Router() Exact Matching app.get('/users', log, function (req, res) {.... Matching parameters app.get('/users/:id', log, function (req, res) {... Matching anything after app.get('/users/*', log, function (req, res) {.... Use sub-router for different kind of resources 1-server.js import express from 'express' import userRouter from './resources/user/user.router' import itemRouter from './resources/item/item.router' import listRouter from './resources/list/list.router' export const app = express() app.use('/api/user', userRouter) app.use('/api/item', itemRouter) app.use('/api/list', listRouter) export const start = async () = {...} 2-user.router.js import { Router } from 'express' import { users, user } from './user.controllers' const router = Router() router.get('/', users) router.put('/', user) export default router 3-user.controllers.js import { User } from './user.model' export const users = (req, res) = { res.status(200).json({ data: req.user }) } user model import mongoose from 'mongoose' import bcrypt from 'bcrypt' const userSchema = new mongoose.Schema( { email: { type: String, required: true, unique: true, trim: true }, password: { type: String, required: true }, settings: { theme: { type: String, required: true, default: 'dark' }, notifications: { type: Boolean, required: true, default: true }, compactMode: { type: Boolean, required: true, default: false } } }, { timestamps: true } ) userSchema.pre('save', function(next) { if (!this.isModified('password')) { return next() } bcrypt.hash(this.password, 8, (err, hash) = { if (err) { return next(err) } this.password = hash next() }) }) userSchema.methods.checkPassword = function(password) { const passwordHash = this.password return new Promise((resolve, reject) = { bcrypt.compare(password, passwordHash, (err, same) = { if (err) { return reject(err) } resolve(same) }) }) } export const User = mongoose.model('user', userSchema)","title":"BACKEND"},{"location":"backend/#backend","text":"","title":"BACKEND"},{"location":"backend/#python","text":"","title":"PYTHON"},{"location":"backend/#node","text":"","title":"NODE"},{"location":"demo/","text":"DEMO REACT React Trip Planner","title":"DEMO"},{"location":"demo/#demo","text":"","title":"DEMO"},{"location":"demo/#react","text":"","title":"REACT"},{"location":"frontend/","text":"FRONTEND JAVASCRIPT Execution Context The environment in which any code run. Javscript engine wraps the code into an execution context. Javscript engine creates in the Execution Context: - Global Object Window (browser) - Special Object 'this' - Ref to outer environment Javscript Engine It performs following two steps while executing any code: Creation Phase Run through your code identifies variables functions Setup memory space for Variables Functions - \"Hoisting\" Hoisting, before code is executed, the JS Engine set asides memory space for Var Func used inside the code. (\"undefined\" is a special value assigned to variables that exists in the code but have not been set) Execution Phase When the code is executed line-by-line (by JS interpreeter) it can access the variables defined inside Execution Context Variable assignment are done in this phase Variable hoisting Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function). Single Threaded (One command at the time) & Synchonous Javascript for programmers behaves in a single threaded manner, one command at the time. And it is Synchronous, one line of code being executed at the time. Bind We use the Bind () method primarily to call a function with the this value set explicitly. In other words, bind () allows us to easily set which specific object will be bound to this when a function or method is invoked. Function invocations and execution stack Anytime you execute or invoke a function in js, a new execution context is created, each execution context, has its own variable environment. \"Asynchronous tasks\" are placed in a so called event queue and executed only when the execution stack is empty. The event queue is constantly monitored by javascript engine. Scopes in javascript Global Scope Local Scope Block Scope (let) Old school JavaScript Traditionally, JavaScript really only has two types of scope : - Global Scope: Variables are known throughout the application, from the start of the application - Functional Scope: Variables are known within the function they are declared in, from the start of the function Modern JavaScript The most recent JavaScript specs now also allow a third scope : Block Scope Variables are known within the block they are declared in, from the moment they are declared onwards let myVariable = \"Some text\"; const myVar = \"val\"; Difference Between Function and Block Scope Function scope is within the function. (var is function scope.) Block scope is within curly brackets. (let and const are block scope.) Scope chain JavaScript engine will try to find the value of the variable in the executing code's block scope (your room) and when unable to find the value there, it will go to its lexical outer scope (your house) and if not even found there, it will go to it\u2019s outer scope\u2019s outer scope(your colony) until it reaches the global scope, let\u2019s say in your case can be the country, which in context of JavaScript will be window, if your working in browser environment. Bind We use the Bind () method primarily to call a function with the this value set explicitly. In other words, bind () allows us to easily set which specific object will be bound to this when a function or method is invoked. Javascript types You dont need to tell the engine what type of data a variable holds, it is going to figure it out while your code is running. Closures A closure is an inner function that has access to the outer (enclosing) function\u2019s variables\u200a\u2014\u200ascope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function\u2019s variables, and it has access to the global variables. script var updateClickCount=(function(){ var counter=0; return function(){ ++counter; document.getElementById( spnCount ).innerHTML=counter; } })(); /script html button onclick= updateClickCount() click me /button div you have clicked span id= spnCount 0 /span /div /html Promise Promises are one way to deal with asynchronous code. A Promise is in one of these states: - Pending: initial state, neither fulfilled nor rejected. - Fulfilled: meaning that the operation completed successfully. - Rejected: meaning that the operation failed. A Promise object is created using the new keyword and its constructor. This constructor takes as its argument a function, called the \"executor function\". This function should take two functions as parameters. The first (resolve) is called when the asynchronous task completes successfully and returns the results of the task as a value. The second (reject) is called when the task fails, and returns the reason for failure, which is typically an error object. Promise example 1 get('supplyData.json').then(function(response) { console.log( Success! , response); }).catch(function(error) { console.log( Failed! , error); }) Promise example 2 var promise1 = new Promise(function(resolve, reject) { setTimeout(function() { resolve('foo'); }, 300); }); promise1.then(function(value) { console.log(value); // expected output: foo }); console.log(promise1); // expected output: [object Promise] Promise example 3 function myAsyncFunction(url) { return new Promise((resolve, reject) = { const xhr = new XMLHttpRequest(); xhr.open( GET , url); xhr.onload = () = resolve(xhr.responseText); xhr.onerror = () = reject(xhr.statusText); xhr.send(); }); } Callback, Promises and Async Callback: A callback is a function that is passed to another function. When the first function is done, it will run the second function. Print a string after a random amount of time: function printString(string, callback){ setTimeout( () = { console.log(string) callback() }, Math.floor(Math.random() * 100) + 1 ) } Let\u2019s try to print the letters A, B, C in that order: function printAll(){ printString( A , () = { printString( B , () = { printString( C , () = {}) }) }) } printAll() Promises vs callaback Promises try to fix callback nesting problem. In our function lets use Promises: function printString(string){ return new Promise((resolve, reject) = { setTimeout( () = { console.log(string) resolve() }, Math.floor(Math.random() * 100) + 1 ) }) } function printAll(){ printString( A ) .then(() = { return printString( B ) }) .then(() = { return printString( C ) }) } printAll() Await: async function printAll(){ await printString( A ) await printString( B ) await printString( C ) } printAll() Prototype Prototype link Every function in JavaScript has a prototype property that references an object. pattern Prototypal Instantiation. function Animal (name, energy) { this.name = name this.energy = energy } Animal.prototype.eat = function (amount) { console.log(`${this.name} is eating.`) this.energy += amount } Animal.prototype.sleep = function (length) { console.log(`${this.name} is sleeping.`) this.energy += length } Animal.prototype.play = function (length) { console.log(`${this.name} is playing.`) this.energy -= length } const leo = new Animal('Leo', 7) const snoop = new Animal('Snoop', 10) Without using new keyword, we have to explicitly create a reference: Looking back at our Animal constructor, the two most important parts were creating the object and returning it. Without creating the object with Object.create, we wouldn\u2019t be able to delegate to the function\u2019s prototype on failed lookups. Without the return statement, we wouldn\u2019t ever get back the created object. function Animal (name, energy) { let animal = Object.create(Animal.prototype) animal.name = name animal.energy = energy return animal } Animal.prototype.eat = function (amount) { console.log(`${this.name} is eating.`) this.energy += amount } Animal.prototype.sleep = function (length) { console.log(`${this.name} is sleeping.`) this.energy += length } Animal.prototype.play = function (length) { console.log(`${this.name} is playing.`) this.energy -= length } const leo = Animal('Leo', 7) const snoop = Animal('Snoop', 10) leo.eat(10) snoop.play(5) ES6 syntax In 2015, EcmaScript (the official JavaScript specification) 6 was released with support for Classes and the class keyword. Let\u2019s see how our Animal constructor function above would look like with the new class syntax. class Animal { constructor(name, energy) { this.name = name this.energy = energy } eat(amount) { console.log(`${this.name} is eating.`) this.energy += amount } sleep(length) { console.log(`${this.name} is sleeping.`) this.energy += length } play(length) { console.log(`${this.name} is playing.`) this.energy -= length } } const leo = new Animal('Leo', 7) const snoop = new Animal('Snoop', 10) Array methods We can see all the array\u2019s methods by simply logging Array.prototype. console.log(Array.prototype) / concat: \u0192n concat() constructor: \u0192n Array() copyWithin: \u0192n copyWithin() entries: \u0192n entries() every: \u0192n every() fill: \u0192n fill() filter: \u0192n filter() find: \u0192n find() findIndex: \u0192n findIndex() forEach: \u0192n forEach() includes: \u0192n includes() indexOf: \u0192n indexOf() join: \u0192n join() keys: \u0192n keys() lastIndexOf: \u0192n lastIndexOf() length: 0n map: \u0192n map() pop: \u0192n pop() push: \u0192n push() reduce: \u0192n reduce() reduceRight: \u0192n reduceRight() reverse: \u0192n reverse() shift: \u0192n shift() slice: \u0192n slice() some: \u0192n some() sort: \u0192n sort() splice: \u0192n splice() toLocaleString: \u0192n toLocaleString() toString: \u0192n toString() unshift: \u0192n unshift() values: \u0192n values() / this keyword It's a special identifier keyword that's automatically defined in the scope of every function. It is based on how the function is called. Call-site because it's the only thing that matters for this binding. function baz() { // call-stack is: `baz` // so, our call-site is in the global scope console.log( baz ); bar(); // -- call-site for `bar` } function bar() { // call-stack is: `baz` - `bar` // so, our call-site is in `baz` console.log( bar ); foo(); // -- call-site for `foo` } function foo() { // call-stack is: `baz` - `bar` - `foo` // so, our call-site is in `bar` console.log( foo ); } baz(); // -- call-site for `baz` Default binding Standalone function invocation. In this case \"this\" points at the global object. function foo() { console.log( this.a ); } var a = 2; foo(); // 2 Implicit Binding Because obj is the this for the foo() call, this.a is synonymous with obj.a. function foo() { console.log( this.a ); } var obj = { a: 2, foo: foo }; obj.foo(); // 2 Explicit Binding All functions you will create, do have access to call(..) and apply(..). How do these utilities work? They both take, as their first parameter, an object to use for the this, and then invoke the function with that this specified. Since you are directly stating what you want the this to be, we call it explicit binding. function foo() { console.log( this.a ); } var obj = { a: 2 }; foo.call( obj ); // 2 new Binding In JS, constructors are just functions that happen to be called with the new operator in front of them. They are not attached to classes, nor are they instantiating a class. They are not even special types of functions. So new is the final way that a function call's this can be bound. We'll call this new binding. function foo(a) { this.a = a; } var bar = new foo( 2 ); console.log( bar.a ); // 2 Determine \"this\" Is the function called with new (new binding)? If so, this is the newly constructed object. var bar = new foo() Is the function called with call or apply (explicit binding), even hidden inside a bind hard binding? If so, this is the explicitly specified object. var bar = foo.call( obj2 ) Is the function called with a context (implicit binding), otherwise known as an owning or containing object? If so, this is that context object. var bar = obj1.foo() Otherwise, default the this (default binding). If in strict mode, pick undefined, otherwise pick the global object. var bar = foo() Objects Objects come in two forms: the declarative (literal) form, and the constructed form. Note: It's extremely uncommon to use the \"constructed form\" for creating objects as just shown. You would pretty much always want to use the literal syntax form. Literal: var myObj = { key: value // ... }; Constructed: var myObj = new Object(); myObj.key = value; Object Types string number boolean null undefined object ES6 Spread Operator 1 const userInfo = { isAuthenticated: false } const action = { isAuthenticated: true, type: 'nope' } const res = { ...userInfo, isAuthenticated: action.isAuthenticated }; console.log(res); // { isAuthenticated: true } Spread Operator 2 var mid = [3, 4]; var arr = [1, 2, ...mid, 5, 6]; console.log(arr); // [ 1, 2, 3, 4, 5, 6 ] Spread Operator 3 let nums = [1, 2, 3]; let abcs = ['a', 'b', 'c']; let alphanum = [ ...nums, ...abs ]; // [1, 2, 3, 'a', 'b', 'c'] Destructuring 1 var address = { city: London , state: UK , zip: 1334 }; let {city, state, zip} = address; log(city); // 'London' log(state); // 'UK' log(zip); // 1334``` h4 Destructuring 2 /h4 ```javascript var address = { city: London , state: UK , zip: 1334 }; let {city: c, state: s, zip: z} = address; log(c, s, z); // 'London UK 1334' Destructuring 3 var person = {name: 'Aaaaaa', age: 35}; displayPerson(person); function displayPerson({name, age}) { ... }``` h4 Destructuring 4 /h4 ```javascript var person = {name: 'Aaaaaa', age: 35}; let {name, age, address} = person; // error! let {name, age, ?address} = person; // OK let ?{name, age, address} = person; // OK Destructuring 5 var nums = [1, 2, 3, 4]; doSomething(nums); function doSomething([first, second, ...others]){ log(first); //logs 1 log(second); //logs 2 log(others); //logs [3, 4] }``` h4 Arrow functions 1 /h4 Specifying parameters: ```javascript () = { ... } // no parameter x = { ... } // one parameter, an identifier (x, y) = { ... } // several parameters Specifying a body: x = { return x * x } // block x = x * x // expression, equivalent to previous line Arrow function 2 const phraseSplitterEs6 = phrase = phrase.split( ); Arrow function 3 var docLogEs6 = () = { console.log(document); }; Arrow function 4 const smartPhones = [ { name:'iphone', price:649 }, { name:'Galaxy S6', price:576 }, { name:'Galaxy Note 5', price:489 } ]; // ES6 ```js const prices = smartPhones.map(smartPhone = smartPhone.price); console.log(prices); // [649, 576, 489] Nested keys Check existance of nested keys. var update_progress = (((data || {}).Oem || {}).Name || {}).UpdateProgress; if (update_progress !== null) { console.log(JSON.stringify(data)); } Difference setInterval and setTimeout setTimeout(): It is a function that execute a JavaScript statement AFTER x interval. setTimeout(function () { something(); }, 1000); // Execute something() 1 second later. setInterval(): It is a function that execute a JavaScript statement EVERY x interval. setInterval(function () { somethingElse(); }, 2000); // Execute somethingElse() every 2 seconds. Performance analysis console.time( start ); // do something console.timeEnd( end ) // this will cause the browser to print time elapsed between start and end. Various examples of Loops, Promises, callback Promise const promise = new Promise ( function(resolve, reject) { if (...something) { resolve('data'); } if (...somethingelse) { reject('error'); } } ) promise.then( function(data) {...} ).catch( function(error) {...} ) Axios Axios cheatsheet Axios github Axios making http requests axios.get('http://.....') .then( function(response) { .... } ) .catch( function(error) { .... } ) .finally( function() { .... } ) async function getUser() { try { const output = await axios.get() } catch { ... } } Axios patch example axios .patch( url, formData, { headers: { 'X-Auth-Token': token }, }) .then((data) = { this.props.loadAccountsData(); }) .catch(error = { throw error; }); Callback functions setInterval setInterval(function(){ console.log('hello); }, 1000); const list = ['uno', 'due', 'tre']; const newList = list.map(function(v) { return v + 'a'; }).filter(function(v) { return v.value 'aa'; } ) button.addEventListener('click', function(e){ ... }) setTimeout(func, 1000); Object.entries(users).forEach(entry, val) = { const [key, value] = entry; } Find highest value in an array const max = data.reduce((prev, current) = (prev.y current.y) ? prev : current) setState spread operator trips: [ { id: 0, name: 'Rome', dateStart: '19/08/2019', dateEnd: '29/08/2019', isConfirmed: false, isEditing: false }, { id: 1, name: 'Paris', dateStart: '15/06/2019', dateEnd: '29/06/2019', isConfirmed: true, isEditing: false }, { id: 2, name: 'Malta', dateStart: '01/02/2019', dateEnd: '08/02/2019', isConfirmed: false, isEditing: false }, { id: 3, name: 'Budapest', dateStart: '01/02/2019', dateEnd: '08/02/2019', isConfirmed: false, isEditing: false } ] handleDateStart = e = this.setState({ form: { ...this.state.form, dateStart: e.target.value } }); TYPESCRIPT It is a typed superset of Javascript that compiles to plain JavaScript. JavaScript has seen a vast development in the last few years. But, JavaScript was never meant for such large-scale application development. JavaScript is a dynamic programming language with no type system. A no type system means that a variable in JavaScript can have any type of value such as string, number, boolean etc. The type system increases the code quality, readability and makes it an easy to maintain and refactor code base. More importantly, errors can be caught at compile time rather than at run time. Hence, the reason to use TypeScript is that it allows JavaScript to be used at scale. Typescript Features Cross-Platform: TypeScript runs on any platform that JavaScript runs on. Object Oriented Language: TypeScript provides powerful features such as Classes, Interfaces, and Modules. Static type-checking: TypeScript uses static typing. This is done using type annotations. It helps type checking at compile time. Thus, you can find errors while typing the code without running your script each time. Additionally, using the type inference mechanism, if a variable is declared without a type, it will be inferred based on its value. ES 6 Features: TypeScript includes most features of planned ECMAScript 2015 (ES 6, 7) such as class, interface, Arrow functions etc. This command compiles the TypeScript code into a plain JavaScript file. tsc filename .ts Visual Studio Code includes TypeScript language support but does not include the TypeScript compiler, tsc. Install typescript compiler npm install -g typescript tsc example.ts a: number and b: number. This is called a Type annotation. Type annotation in an object: var employee : { id: number; name: string; }; employee = { id: 100, name : John } var age: number = 32; // number variable var name: string = John ;// string variable var isUpdated: boolean = true;// Boolean variable In the above example, each variable is declared with their data type. These are type annotations. Type annotations are used to enforce type checking. It is not mandatory in TypeScript to use type annotations. However, type annotations help the compiler in checking types and helps avoid errors dealing with data types. It is also a good way of writing code for easier readability and maintenance by future developers working on your code. Type Inference Where not declared, Types are inferred by TypeScript compiler when: - Variables are initialized - Default values are set for parameters - Function return types are determined typescript example with if let let x: number = 10, y = 20; if (x y) { console.log('x is greater than y.'); } else { console.log('x is less than or equal to y.'); //This will be executed } typescript switch example var a:number = 1 var b:number = 3 switch (a+b){ case 1 : { console.log( a+b is 1. ) break } case 3 : { console.log( a+b is 3. ) break } case 4 : { console.log( a+b is 4. ) break } case 5 : { console.log( a+b is 5. ) break } default : { console.log( a+b is 5. ) break } } Typescript loops In TypeScript, there are three types of for loops: for loop for (let i = 0; i 3; i++) { console.log ( Block statement execution no. + i); } for..of loop it iterates over elements of an array let arr = [10, 20, 30, 40]; for (var val of arr) { console.log(val); // prints values: 10, 20, 30, 40 } for..in loop it returns the index. let arr = [10, 20, 30, 40]; for (var index in arr) { console.log(index); // prints indexes: 0, 1, 2, 3 console.log(arr[index]); // prints elements: 10, 20, 30, 40 } do ... while let i: number = 4; do { console.log( Block statement execution no. + i ) i++; } while ( i 4) Typescript functions function Greet(greeting: string, name?: string ) : string { return greeting + ' ' + name + '!'; } Greet('Hello','Steve');//OK, returns Hello Steve! Greet('Hi'); // OK, returns Hi undefined! . Greet('Hi','Bill','Gates'); //Compiler Error: Expected 2 arguments, but got 3. Arrow functions let sum = (x: number, y: number): number = { return x + y; } sum(10, 20); //returns 30 Function Overloading You can have multiple functions with the same name but different parameter types and return type. However, the number of parameters should be the same. function add(a:string, b:string):string; function add(a:number, b:number): number; function add(a: any, b:any): any { return a + b; } add( Hello , Steve ); // returns Hello Steve add(10, 20); // returns 30 Rest Parameters When the number of parameters that a function will receive is not known or can vary, we can use rest parameters. function Greet(greeting: string, ...names: string[]) { return greeting + + names.join( , ) + ! ; } Greet( Hello , Steve , Bill ); // returns Hello Steve, Bill! Greet( Hello );// returns Hello ! Interfaces In TypeScript, Interface is a deal that the objects of the type should contain properties and functions declared in the interface. interface interface_name { // variables' declaration // methods' declaration } function example: interface Student{ // variables name:string rollnumber:number // functions displayInformation: () = void } var student1: Student = { name: Rohit , rollnumber:2, displayInformation: ():void = { console.log( \\n---- Student Information ---- ) console.log( Name is : + student1.name) console.log( Roll Number is : + student1.rollnumber) } } console.log(student1.name) console.log(student1.rollnumber) student1.displayInformation() class example: interface IEmployee { empCode: number; name: string; getSalary:(number)= number; } class Employee implements IEmployee { empCode: number; name: string; constructor(code: number, name: string) { this.empCode = code; this.name = name; } getSalary(empCode:number):number { return 20000; } } let emp = new Employee(1, Steve ); Class interface IPerson { name: string; display():void; } interface IEmployee { empCode: number; } class Employee implements IPerson, IEmployee { empCode: number; name: string; constructor(empcode: number, name:string) { this.empCode = empcode; this.name = name; } display(): void { console.log( Name = + this.name + , Employee Code = + this.empCode); } } let per:IPerson = new Employee(100, Bill ); per.display(); // Name = Bill, Employee Code = 100 let emp:IEmployee = new Employee(100, Bill ); emp.display(); //Compiler Error: Property 'display' does not exist on type 'IEmployee' TSLint-React Install typescript,tslint and tslint-react packages globally yarn global add tslint typescript tslint-react Now inside your project directory, initialise tslint tslint --init Configuration tslint { defaultSeverity : error , extends : [ tslint-react ], jsRules : { }, rules : { member-access : false, ordered-imports : false, quotemark : false, no-console : false, semicolon : false, jsx-no-lambda : false }, rulesDirectory : [ ], linterOptions : { exclude : [ config/**/*.js , node_modules/**/*.ts ] } } Applying interfaces to components interface FormState { submitted?: boolean; full_name: string; age: number; } export class MyForm extends React.Component FormProps, FormState { ... } and with functional components function MyForm(props: FormProps) { ... } Import/Export Interfaces export // src/types/index.tsx export interface FormProps { first_name: string; last_name: string; age: number; agreetoterms?: boolean; } import // src/components/MyForm.tsx import React from 'react'; import { StoreState } from '../types/index'; enum Check whether the submitted form value is valid. // define enum enum HeardFrom { SEARCH_ENGINE = Search Engine , FRIEND = Friend , OTHER = Other } //construct heardFrom array let heardFrom = [HeardFrom.SEARCH_ENGINE, HeardFrom.FRIEND, HeardFrom.OTHER]; //get submitted form value const submitted_heardFrom = form.values.heardFrom; //check if value is valid heardFrom.includes(submitted_heardFrom) ? valid = true : valid = false; Using Typescript with React React Component with typescript import * as React from 'react' export interface StandardComponentProps { title?: string children: React.ReactNode } export function StandardComponent({ children, title = 'Dr.', }: StandardComponentProps) { return ( div {title}: {children} /div ) } Interface for Redux Store // src/types/index.tsx export interface MyStore { language: string; country: string; auth: { authenticated: boolean; username?: string; }; } Define Action type and actions // src/constants/index.tsx export const SET_LANGUAGE = 'INCREMENT_ENTHUSIASM'; export type SET_LANGUAGE = typeof SET_LANGUAGE; export const SET_COUNTRY = 'SET_COUNTRY'; export type SET_COUNTRY = typeof SET_COUNTRY; export const AUTHENTICATE = 'AUTHENTICATE'; export type AUTHENTICATE = typeof AUTHENTICATE; These const type objects can now be imported into your src/actions/index.tsx file, where we can define action interfaces and the actions themselves, and typing them along the way: // src/actions/index.tsx import * as constants from '../constants'; //define action interfaces export interface SetLanguage { type: constants.SET_LANGUAGE; language: string; } export interface SetCountry { type: constants.SET_COUNTRY; country: string; } export interface Authenticate{ type: constants.AUTHENTICATE; username: string; pw: string; } //define actions export function setLanguage(l: string): SetLanguage ({ type: constants.SET_LANGUAGE, language: l }); export function setCountry(c: string): SetCountry ({ type: constants.SET_COUNTRY, country: c }); export function authenticate(u: string, pw: string): Authenticate ({ type: constants.SET_COUNTRY, username: u, pw: pw }); Back in our actions file, add a union type for locality under our interfaces: // src/actions/index.tsx export type Locality = SetLanguage | SetCountry; // src/reducers/index.tsx import { Locality } from '../actions'; import { StoreState } from '../types/index'; import { SET_LANGUAGE, SET_COUNTRY, AUTHENTICATE} from '../constants/index'; export function locality(state: StoreState, action: Locality): StoreState { switch (action.type) { case SET_LANGUAGE: return return { ...state, language: action.language}; case SET_COUNTRY: return { ...state, language: action.country}; case AUTHENTICATE: return { ...state, auth: { username: action.username, authenticated: true } }; } return state; } Creating initial store // src/index.tsx import { createStore } from 'redux'; import { locality } from './reducers/index'; import { StoreState } from './types/index'; const store = createStore StoreState (locality, { language: 'British (English)', country: 'United Kingdom', auth: { authenticated: false } }); MapState and Dispatch // mapStateToProps example import { StoreState } from '../types/index'; interface LocalityProps = { country: string; language: string; } function mapStateToProps (state: StoreState, ownProps: LocalityProps) ({ language: state.language, country: state.country, }); MapDispatchToProps // mapDispatchToProps example const mapDispatchToProps = { actions.setLanguage, actions.setCountry } REACT State React is all about one-way data flow down the component hierarchy. State is created in the component and stays in the component. It can be passed to a children as its props. Basic Concepts JSX Rendering Elements Components Functional/Container State and Lifecycle Handling Events Conditional Rendering Lists and Keys Forms JSX MyComponent message={'hello world'} / Rendering elements class TodoList extends React.Component { render() { return ( ul {this.props.items.map(item = ( li key={item.id} {item.text} /li ))} /ul ); } } Stateless function component - sfc const | = props = { return ( | ); }; export default |; State and lifecycle Mounting These methods are called in the following order: * constructor() * static getDerivedStateFromProps() * render() * componentDidMount() Updating An update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered: * static getDerivedStateFromProps() * shouldComponentUpdate() * render() * getSnapshotBeforeUpdate() * componentDidUpdate() Unmounting This method is called when a component is being removed from the DOM: * componentWillUnmount() Handling events function ActionLink() { function handleClick(e) { e.preventDefault(); console.log('The link was clicked.'); } return ( a href= # onClick={handleClick} Click me /a ); } Conditional rendering render() { const isLoggedIn = this.state.isLoggedIn; return ( div The user is b {isLoggedIn ? 'currently' : 'not'} /b logged in. /div ); } List and Keys function NumberList(props) { const numbers = props.numbers; return ( ul {numbers.map((number) = ListItem key={number.toString()} value={number} / )} /ul ); } Forms class NameForm extends React.Component { constructor(props) { super(props); this.state = {value: ''}; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); } handleChange(event) { this.setState({value: event.target.value}); } handleSubmit(event) { alert('A name was submitted: ' + this.state.value); event.preventDefault(); } render() { return ( form onSubmit={this.handleSubmit} label Name: input type= text value={this.state.value} onChange={this.handleChange} / /label input type= submit value= Submit / /form ); } } React Fragment Fragments let you group a list of children without adding extra nodes to the DOM. render() { return ( React.Fragment ChildA / ChildB / ChildC / /React.Fragment ); } Import CSS import './styles/style.css' Declare state export class Counter extends React.Component { constructor(props) { super(props); this.state = {count: props.initialCount}; } defaultProps example Notification.defaultProps = { actionTitle: '', selectedElements: {}, actionLogs: [], }; propTypes example Notification.propTypes = { actionTitle: PropTypes.string, isOpen: PropTypes.bool.isRequired, close: PropTypes.func.isRequired, elementTitle: PropTypes.objectOf(PropTypes.any), selectedElements: PropTypes.arrayOf(PropTypes.any), }; Import statement - imr import React from 'react'; Import React and Component - imrc import React, { Component } from 'react'; Make a Class Component and export - cc class | extends Component { state = { | }, render() { return ( | ); } } export default |; componentDidMount - cdm componentDidMount() { | } componentDidUpdate - cdu componentDidUpdate(prevProps, prevState) { | } setState - ss this.setState({ | : | }); render - ren render() { return ( | ); } export example with mapStateToProps, mapDispatchToProps export default connect(mapStateToProps, mapDispatchToProps)(Name); mapStateToProps example const mapStateToProps = (state) = { return { elements: state.refreshRaidElements.raidElements, controllers: state.refreshControllers.controllers, waitingLogs: state.watingLogs.wating_action_logs, }; }; mapDispatchToProps Import actions import { checkboxClicked, selectedIndex } from '../../../store/actions/ElementsAction'; Emit action this.props.selectedRaidIndex(id); Dispatch actions const mapDispatchToProps = (dispatch) = { return { checkboxClicked: id = dispatch(checkboxClicked(id)), selectedIndex: id = dispatch(selectedIndex(id)), }; }; React Redux Thunk Actions in Redux are dispatched synchronously. Thankfully though, Redux allows for middleware that sits between an action being dispatched and the action reaching the reducers. Redux Thunk is a middleware that lets you call action creators that return a function instead of an action object. That function receives the store\u2019s dispatch method, which is then used to dispatch regular synchronous actions inside the body of the function once the asynchronous operations have completed. Install redux-thunk npm install redux-thunk Apply middleware to app store. import React from 'react'; import ReactDOM from 'react-dom'; import { createStore, applyMiddleware } from 'redux'; import { Provider } from 'react-redux'; import thunk from 'redux-thunk'; import rootReducer from './reducers'; import App from './App'; // use applyMiddleware to add the thunk middleware to the store const store = createStore(rootReducer, applyMiddleware(thunk)); ReactDOM.render( Provider store={store} App / /Provider , document.getElementById('root') ); The most common use-case for Redux Thunk is for communicating asynchronously with an external API to retrieve or save data. AddTodo.jsx import { connect } from 'react-redux'; import { addTodo } from '../actions'; import NewTodo from '../components/NewTodo'; const mapDispatchToProps = dispatch = { return { onAddTodo: todo = { dispatch(addTodo(toto)); } }; }; export default connect( null, mapDispatchToProps )(NewTodo); actions/index.jsx import { ADD_TODO_SUCCESS, ADD_TODO_FAILURE, ADD_TODO_STARTED, DELETE_TODO } from './types'; import axios from 'axios'; export const addTodo = ({ title, userId }) = { return dispatch = { dispatch(addTodoStarted()); axios .post(`https://jsonplaceholder.typicode.com/todos`, { title, userId, completed: false }) .then(res = { dispatch(addTodoSuccess(res.data)); }) .catch(err = { dispatch(addTodoFailure(err.message)); }); }; }; const addTodoSuccess = todo = ({ type: ADD_TODO_SUCCESS, payload: { ...todo } }); const addTodoStarted = () = ({ type: ADD_TODO_STARTED }); const addTodoFailure = error = ({ type: ADD_TODO_FAILURE, payload: { error } }); reducers/todoReducers.jsx import { ADD_TODO_SUCCESS, ADD_TODO_FAILURE, ADD_TODO_STARTED, DELETE_TODO } from '../actions/types'; const initialState = { loading: false, todos: [], error: null }; export default function todosReducer(state = initialState, action) { switch (action.type) { case ADD_TODO_STARTED: return { ...state, loading: true }; case ADD_TODO_SUCCESS: return { ...state, loading: false, error: null, todos: [...state.todos, action.payload] }; case ADD_TODO_FAILURE: return { ...state, loading: false, error: action.payload.error }; default: return state; } } React Portals Portals provide a way to render children into any DOM node. The first argument is any renderable child. The second argument should be a reference to the DOM node where the renderable child will be rendered. ReactDOM.createPortal(child, container) React portal example import React from react ; import ReactDOM, { render } from react-dom ; import { overlay, overlayContent } from ./overlayStyles ; class Overlay extends React.Component { constructor(props) { super(props); // Create container DOM element and append to DOM. this.overlayContainer = document.createElement( div ); document.body.appendChild(this.overlayContainer); } componentWillUnmount() { document.body.removeChild(this.overlayContainer); } render() { return ReactDOM.createPortal( div style={overlay} div style={overlayContent} {this.props.children} /div /div , this.overlayContainer ); } } class App extends React.Component { state = { showOverlay: false }; toggleOverlay = () = { this.setState(prevState = { return { showOverlay: !prevState.showOverlay }; }); }; render() { return ( div h1 Dashboard /h1 {this.state.showOverlay ( Overlay div Overlay Content{ } button onClick={this.toggleOverlay} Close /button /div /Overlay )} button onClick={this.toggleOverlay} Open Overlay /button /div ); } } render( App / , document.getElementById( root )); React Hooks Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class. Hooks are functions that let you \u201chook into\u201d React state and lifecycle features from function components. Hooks don\u2019t work inside classes. Our goal is for Hooks to cover all use cases for classes as soon as possible. It is an early time for Hooks, and some third-party libraries might not be compatible with Hooks at the moment. Lifecycle methods constructor: Function components don\u2019t need a constructor. componentDidMount, componentDidUpdate, componentWillUnmount: The useEffect Hook can express all combinations of these (including less common cases) We recommend to split state into multiple state variables based on which values tend to change together. function Box() { const [position, setPosition] = useState({ left: 0, top: 0 }); const [size, setSize] = useState({ width: 100, height: 100 }); useEffect(() = { function handleWindowMouseMove(e) { setPosition({ left: e.pageX, top: e.pageY }); } // ... State Hooks import React, { useState } from 'react'; function Example() { // Declare a new state variable, which we'll call count const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } Declaring multiple state variables function ExampleWithManyStates() { // Declare multiple state variables! const [age, setAge] = useState(42); const [fruit, setFruit] = useState('banana'); const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]); // ... } Effect Hook The Effect Hook, useEffect serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React classes, but unified into a single API. By default, React runs the effects after every render \u2014 including the first render. Effects may also optionally specify how to \u201cclean up\u201d after them by returning a function. import React, { useState, useEffect } from 'react'; function FriendStatus(props) { const [isOnline, setIsOnline] = useState(null); function handleStatusChange(status) { setIsOnline(status.isOnline); } useEffect(() = { ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () = { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; }); if (isOnline === null) { return 'Loading...'; } return isOnline ? 'Online' : 'Offline'; } Reuse logic in another component. It takes friendID as an argument, and returns whether our friend is online. import React, { useState, useEffect } from 'react'; function useFriendStatus(friendID) { const [isOnline, setIsOnline] = useState(null); function handleStatusChange(status) { setIsOnline(status.isOnline); } useEffect(() = { ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange); return () = { ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange); }; }); return isOnline; } Reuse friend online/offline in multiple components function FriendStatus(props) { const isOnline = useFriendStatus(props.friend.id); if (isOnline === null) { return 'Loading...'; } return isOnline ? 'Online' : 'Offline'; } function FriendListItem(props) { const isOnline = useFriendStatus(props.friend.id); return ( li style={{ color: isOnline ? 'green' : 'black' }} {props.friend.name} /li ); } REST API Definition REST stands for Representational State Transfer. It is web standards based architecture and uses HTTP Protocol. A Web API conforming to the REST architectural style is a REST API. A web service is a collection of standards used for exchanging data between applications or systems. Web services based on REST Architecture are known as RESTful web services. These webservices uses HTTP methods to implement the concept of REST architecture. A RESTful web service usually defines a URI, Uniform Resource Identifier a service, which provides resource representation such as JSON and set of HTTP Methods. A REST API is composed of four distinct resource archetypes: document, collection, store, and controller URI Format generic URI syntax as shown below: URI = scheme :// authority / path [ ? query ] [ # fragment ] Good Practices Forward slash separator (/) indicates a hierarchical relationship underscores (_) should not be used in uris Trailing forward slash (/) should not be included in uris hyphens (-) should be used to improve readability of uris lowercase letters should be preferred in uri paths crud function names should not be used in uris query component of a URI may be used to filter collections or stores Request Methods CRUD requests: DELETE, GET, POST, PUT HEAD retrieve metadata. OPTIONS retrieve metadata of resource\u2019s available interactions. Some Responses status 200 success 201 new resource has been created 202 Accepted, start of an asynchronous action 204 No Content body left blank 301 Moved Permanently 400 Bad Request Indicates a nonspecific client error 401 Unauthorized 402 Forbidden 404 Not Found 405 Method Not Allowed HTTP Headers Various forms of metadata may be conveyed through the entity headers. Request headers Cookie: HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user\u2019s request. The client may store it and send it back with the next request to the same server. User-Agent: identify the application type, operating system, software vendor Host: The Host request header specifies the domain name of the server X-Requested-With: Mainly used to identify AJAX requests. Accept-Language which languages the client is able to understand Response headers Content-Type Content-Length size of the response body Set-Cookie used to send cookies from the server to the client. Body Format A REST API commonly uses a response message\u2019s entity body to help convey the state of a request message\u2019s identified resource. Today, the most commonly used text formats is JSON. API Documentation Resource Description example from MailChimp Campaign resource Resource Description consists of 1-3 sentences. Resources usually have various endpoints to access the resource and multiple methods for each endpoint. Sometimes the general resource isn\u2019t described; instead, it just groups the endpoints. Although the resource isn\u2019t described, descriptions may be added for each of the endpoints. Endpoint and Methods The endpoints indicate how you access the resource, The method indicates the allowed interactions (such as GET, POST, or DELETE) with the resource. Endpoints usually have brief descriptions similar to the overall resource description but shorter. POST /campaigns Create a new campaign GET /campaigns Get all campaigns GET /campaigns/{campaign_id} Get information about a specific campaign PATCH /campaigns/{campaign_id} Update the settings for a campaign DELETE /campaigns/{campaign_id} Delete a campaign Parameters Parameters are options you can pass with the endpoint to influence the response. There are four types of parameters: header parameters, path parameters, query string parameters, and request body parameters. Header parameters are included in the request header. Usually, the header just includes authorization parameters. Path parameters are part of the endpoint itself and are not optional. For example, in the following endpoint, {user} and {bicycleId} are required path parameters: /service/myresource/user/{user}/bicycles/{bicycleId} Query string parameters appear after a question mark (?) in the endpoint. The question mark followed by the parameters and their values is referred to as the \u201cquery string.\u201d /surfreport/{beachId}?days=3 units=metric time=1400 Body parameters : with POST requests (where you\u2019re creating something), you submit a JSON object in the request body. Request example The request example includes a sample request using the endpoint, showing some parameters configured. curl -u \"username:password\" -H \"Content-Type:application/json\" -X GET \"https://api.callfire.com/v2/texts?limit=50 offset=200\" Response example The response example shows a sample response from the request example; the response schema defines all possible elements in the response. The response lets developers know if the resource contains the information they want, the format, and how that information is structured and labeled. The description of the response is known as the response schema. The response schema documents the response in a more comprehensive, general way, listing each property that could possibly be returned, what each property contains, the data format of the values, the structure, and other details. The definition of the response is called the schema or model. { Context : ualize , Destination : http://aaaa.com/aaa , EventTypes : [ StatusChange , ResourceAdded , ResourceRemoved ], Id : 3a5f20212134 , Name : EventSubscription , Oem : {}, Protocol : Redfish } API Documentation example API Docs list OpenApi OpenAPI is a specification for describing REST APIs. Display frameworks such as Swagger UI can parse the OpenAPI specification and generate interactive documentation that lets users try out endpoints while learning about the API. With OpenAPI, you have a set of JSON objects, with a specific schema that defines their naming, order, and contents. In the OpenAPI specification, your endpoints are paths. Instead of writing following example in a text editor, use Swagger Editor . Instead of coding the OpenAPI specification document by hand, you can also auto-generate it from annotations in your programming code. paths: /pets: get: summary: List all pets operationId: listPets tags: - pets parameters: - name: limit in: query description: How many items to return at one time (max 100) required: false schema: type: integer format: int32 responses: '200': description: An paged array of pets headers: x-next: description: A link to the next page of responses schema: type: string content: application/json: schema: $ref: #/components/schemas/Pets default: description: unexpected error content: application/json: schema: $ref: #/components/schemas/Error After you have a valid OpenAPI specification document that describes your API, you can then feed this specification to different tools to parse it and generate the interactive documentation. Probably the most common tool used to parse the OpenAPI specification is Swagger UI. OpenAPI root level openapi indicate the version of the OpenAPI spec to validate against. info The info object contains basic information about your API, including the title, a description, version, link to the license, link to the terms of service, and contact information. servers In the servers object, you specify the basepath used in your API requests. paths listing the paths (endpoints) and their allowed operations (methods). paths: /weather: get: tags: summary: description: operationId: externalDocs: parameters: responses: paths: /pet/findByStatus: get: tags: - pet summary: Finds Pets by status description: Multiple status values can be provided with comma separated strings operationId: findPetsByStatus produces: - application/xml - application/json parameters: - name: status in: query description: Status values that need to be considered for filter required: true type: array items: type: string enum: - available - pending - sold default: available collectionFormat: multi responses: 200: description: successful operation schema: type: array items: $ref: #/definitions/Pet 400: description: Invalid status value security: - petstore_auth: - write:pets - read:pets components The components object can contain these objects: schemas responses parameters examples requestBody headers securitySchemes links callbacks security Swagger UI supports four authorization schemes: API key HTTP OAuth 2.0 Open ID Connect The security object specifies the security or authorization protocol used when submitting requests. tags At the root level, the tags object lists all the tags that are used in the operation objects externalDocs Here\u2019s an example of an externalDocs object: externalDocs: description: API Documentation url: https://openweathermap.org/api Axios - HTTP client Axios install npm install axios --save Basic get request componentDidMount() { axios.get(`https://jsonplaceholder.typicode.com/users`) .then(res = { const persons = res.data; this.setState({ persons }); }) } Multiple get requests let URL1 = https://www.something.com let URL2 = https://www.something1.com let URL3 = https://www.something2.com const promise1 = axios.get(URL1); const promise2 = axios.get(URL2); const promise3 = axios.get(URL3); Promise.all([promise1, promise2, promise3]).then(function(values) { console.log(values); }); JS Utilities Check if an object is empty function isEmpty(obj) { for(var key in obj) { if(obj.hasOwnProperty(key)) return false; } return true; } var myObj = {}; // Empty Object if(isEmpty(myObj)) { // Object is empty (Would return true in this example) } else { // Object is NOT empty } Object is an array? var d = [] console.log(Object.prototype.toString.call(d)); GRAPHQL About GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. Open source and created by Facebook Gives clients the power to describe exactly what data they want Can sit in front of any existing API because its just a query language REST APIs have shown to be too inflexible to keep up with the rapidly changing requirements of the clients that access them. GraphQL was developed to cope with the need for more flexibility and efficiency! It solves many of the shortcomings and inefficiencies that developers experience when interacting with REST APIs. When working with REST APIs, data is loaded from specific endpoints. Instead of having multiple endpoints that return fixed data structures, GraphQL APIs typically only expose a single endpoint. This works because the structure of the data that\u2019s returned is not fixed. Instead, it\u2019s completely flexible and lets the client decide what data is actually needed. GraphQL vs REST GraphQL only has one URL. Request details are in a POST body (or GET) In REST, shape and size of data resource is determined by the server, In Graphql its determined by the query (request) In REST, you have to male multiple API calls to retrieve relational data, in GraphQL you can start with entry resource and traverse all the connections in one request In REST, the shape of the response is determined by whom ever created the server, in GraphQL the shape is determined by the query Terminology - Query - Queries specify which endpoints we want to call, how we want the response to look - Fields - Properties that comprise the shape of a response - Type - A collection of fields that make up a specific queryable object. - Mutation - A special kind of GraphQL query that causes changes to the data available on the backend - Schema - A special kind of document that describes how a GraphQL endpoint can receive and send information - Query Language - The syntax we use to write GraphQL queries that retrieve data from an endpoint - Self-documenting API - An API that can be easily understood just by reading its schema -- no extra documentation needed Basic Query { allPersons { name } } allPersons is called the root field of the query. Everything that follows the root field, is called the payload of the query. This will return: { allPersons : [ { name : Johnny }, { name : Sarah }, { name : Alice } ] } it allows for naturally querying nested information. { allPersons { name age posts { title } } } Each field can have zero or more arguments if that\u2019s specified in the schema. For example, the allPersons field could have a last parameter to only return up to a specific number of persons. { allPersons(last: 2) { name } } Mutations It allows to reate, update and delete. Create a new Person: mutation { createPerson(name: Bob , age: 36) { name age } } GraphQL types have unique IDs that are generated by the server when new objects are created: type Person { id: ID! name: String! age: Int! } Directly ask for the id in the payload of the mutation mutation { createPerson(name: Alice , age: 36) { id } } Subscriptions Realtime connection to the server in order to get immediately informed about important events. Subscriptions represent a stream of data sent over to the client. Subscribe on events happening on the Person type: subscription { newPerson { name age } } After a client sent this subscription to a server, a connection is opened between them. Then, whenever a new mutation is performed that creates a new Person, the server sends the information about this person over to the client: { newPerson : { name : Jane , age : 23 } } Schema It specifies the capabilities of the API and defines how clients can request the data. There are some special root types: type Query { ... } type Mutation { ... } type Subscription { ... } To enable the allPersons-query that we saw before, the Query type would have to be written as follows: type Query { allPersons: [Person!]! } Schema example type Query { allPersons(last: Int): [Person!]! } type Mutation { createPerson(name: String!, age: Int!): Person! } type Subscription { newPerson: Person! } type Person { name: String! age: Int! posts: [Post!]! } type Post { title: String! author: Person! } With the ideal declarative data fetching approach, a client shouldn\u2019t be doing more than the following two steps: Describe data requirements Display data in UI GraphQL client libraries like Relay or Apollo will enable you to do. They provide the abstraction that you need to be able to focus on the important parts of your application rather than having to deal with the repetitive implementation of infrastructure. Example 1 Frontend graphql query in react with Apollo npm install -g npx // (npx comes with npm 5.2+ and higher) npx create-react-app react-graphql-test npm start Dependencies install npm install apollo-boost react-apollo graphql-tag graphql apollo-boost: Package containing reccomended Apollo Client setup react-apollo: View layer integration for React graphql-tag: Necessary for parsing your GraphQL queries graphql: Also parses your GraphQL queries in App.js import ApolloClient from apollo-boost ; const client = new ApolloClient({ uri: [Insert URI of GraphQL endpoint] }); Connect the instance of ApolloClient to the React app import { ApolloProvider } from react-apollo ; ... const App = () = ( ApolloProvider client={client} div h2 My first Apollo app /h2 /div /ApolloProvider ); Retrieve a list of Courses. Query component makes it extremely easy to embed the GraphQL query directly in the JSX code of the component. import React from 'react'; import { Query } from react-apollo ; import gql from graphql-tag ; const Courses = () = ( Query query={gql` { allCourses { id title author description topic url } } `} {({ loading, error, data }) = { if (loading) return p Loading... /p ; if (error) return p Error :( /p ; return data.allCourses.map(({ id, title, author, description, topic, url }) = ( div key={id} p {`${title} by ${author}`} /p /div )); }} /Query ); export default Courses; Example 2 !-- https://www.howtographql.com/react-apollo/1-getting-started/ -- SOCKET socket client socket install npm i socket.io-client const io = require('socket.io-client')('https://'.concat(document.domain).concat(':').concat(location.port)); export default io; io Emit from client import io from './components/common/io'; io.emit('populate_table', { table_name: 'users_table' }); io Receive io.on('isloggedin', (payload) = { ... } Remove listeners io.removeAllListeners('action_response'); socketio server flask from app.server import socketio @socketio.on(socket_names.UPLOAD_LICENSE) def upload_license_action(args): Upload a new license file. data = args['data'] uuid = args['uuid'] sid = request.sid user_store.update_previous_connection(sid) socketio.emit(socket_names.ACTION_TIME, { 'action_time': now(sid)}, room=sid) with thread_lock: socketio.start_background_task( target=upload_license, kwargs={'data': data, 'sid': sid, 'uuid': uuid}) CSS3/SASS CSS Architecture SMACSS method consists on organizing CSS rules in five different categories: Basic: Default elements styles. It doesn\u2019t include any class or ID selectors. Layout: It divides the content into sections (header, footer, primary content). Module: Those components that can be reused. Modules sit inside Layout components. State: The rules that establish the state of our modules. A state is something that augments and overrides all other styles. Theme: It would allow the more visual aspects of the project. Display property block: element starts on a new line and stretches out to the left and right as far as it can. inline: element not on a new line and doesnt stretch. inline-block: element can have width and height. flex: Displays an element as a block-level flex container. grid: Displays an element as a block-level grid container. ... Position static: is not positioned in any special way. relative: the element is positioned relative to its normal position. fixed - the element is positioned related to the browser window. absolute - the element is positioned absolutely to its first positioned parent. Box Model Content: The content of the box, where text and images appear Padding: Clears an area around the content. The padding is transparent Border: A border that goes around the padding and content Margin: Clears an area outside the border. The margin is transparent Formatting CSS - based on Airbnb style guide Use soft tabs (2 spaces) for indentation. Prefer dashes over camelCasing in class names. Underscores and PascalCasing are okay if you are using BEM (see OOCSS and BEM below). Do not use ID selectors. When using multiple selectors in a rule declaration, give each selector its own line. Put a space before the opening brace { in rule declarations. In properties, put a space after, but not before, the : character. Put closing braces } of rule declarations on a new line. Put blank lines between rule declarations. Prefer line comments (// in Sass-land) to block comments. Bad .avatar{ border-radius:50%; border:2px solid white; } .no, .nope, .not_good { // ... } #lol-no { // ... } Good .avatar { border-radius: 50%; border: 2px solid white; } .one, .selector, .per-line { // ... } Use a combination of OOCSS and BEM OOCSS, or \u201cObject Oriented CSS\u201d, is an approach for writing CSS that encourages you to think about your stylesheets as a collection of \u201cobjects\u201d: reusable, repeatable snippets that can be used independently throughout a website. It is based on two main principles: a. Separate structure from skin b. Separate containers from content (you should avoid using child selectors whenever it\u2019s possible.) BEM, or \u201cBlock-Element-Modifier\u201d, is a naming convention for classes in HTML and CSS. Responsive Design Defined by three characteristics Flexible grid-based layout Media queries (CSS3) Images that resize Dev made Grids homemade grids guide FLEXBOX Parent Flex Container display: flex | inline-flex; flex-direction: row | row-reverse | column | columnreverse; flex-wrap: wrap | nowrap | wrap-reverse; flex-flow (shorthand for flex-direction and flexwrap) justify-content: flex-start | flex-end | center | spacebetween | space-around | space-evenly; align-items: flex-start | flex-end | center | baseline | stretch; align-content (cross axis - adjust to largest item): flex-start | flex-end | center | stretch | spacebetween | space-around; Children Flex Items order: integer ; flex-grow: number ; flex-shrink: number ; flex-basis: length | auto; flex: shorthand for grow, shrink, and basis (default: 0 1 auto) align-self: overrides alignment set on parent GRID Grid Container display: grid | inline-grid; grid-template-columns: track-size ... | line-name track-size ...; grid-template-rows: track-size ... | line-name track-size ...; grid-template-areas: grid-area-name ; grid-template: A shorthand for setting grid-template-rows, grid-template-columns, and grid-template-areas in a single declaration. grid-column-gap: line-size ; grid-row-gap: line-size ; grid-gap: A shorthand for grid-row-gap and grid-column-gap justify-items: start | end | center | stretch; align-items: start | end | center | stretch; place-items: place-items sets both the align-items and justify-items properties in a single declaration. justify-content: start | end | center | stretch | space-around | space-between | space-evenly; align-content: start | end | center | stretch | space-around | space-between | space-evenly; place-content: place-content sets both the align-content and justify-content properties in a single declaration. grid-auto-columns: track-size ...; grid-auto-rows: track-size ...; grid-auto-flow: row | column | row dense | column dense grid: A shorthand for setting all of the following properties in a single declaration: grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and grid-auto-flow Grid Items grid-column-start: number | name | span number | span name | auto grid-column-end: number | name | span number | span name | auto grid-row-start: number | name | span number | span name | auto grid-row-end: number | name | span number | span name | auto grid-column: start-line / end-line | start-line / span value ; grid-row: start-line / end-line | start-line / span value ; grid-area: name | row-start / column-start / row-end / column-end ; justify-self: start | end | center | stretch; align-self: start | end | center | stretch; place-self: center; Media Queries /* ##Device = Desktops ##Screen = 1281px to higher resolution desktops */ @media (min-width: 1281px) {} /* ##Device = Laptops, Desktops ##Screen = B/w 1025px to 1280px */ @media (min-width: 1025px) and (max-width: 1280px) {} /* ##Device = Tablets, Ipads (portrait) ##Screen = B/w 768px to 1024px */ @media (min-width: 768px) and (max-width: 1024px) {} /* ##Device = Tablets, Ipads (landscape) ##Screen = B/w 768px to 1024px */ @media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {} /* ##Device = Low Resolution Tablets, Mobiles (Landscape) ##Screen = B/w 481px to 767px */ @media (min-width: 481px) and (max-width: 767px) {} /* ##Device = Most of the Smartphones Mobiles (Portrait) ##Screen = B/w 320px to 479px */ @media (min-width: 320px) and (max-width: 480px) {} BEM (Block Element Modifier) div class= block__element block__element--modifier Hallo /div .block { __element { background: blue; --modifier { color: white; } } } BEM with Sass .person { __hand {/* Styles */} __leg {/* Styles */} --male { /* Styles */ __hand { /* Styles */ --left {/* Styles */} --right {/* Styles */} } __leg { /* Styles */ --left {/* Styles */} --right {/* Styles */} } } --female { /* Styles */ __hand { /* Styles */ --left {/* Styles */} --right {/* Styles */} } __leg { /* Styles */ --left {/* Styles */} --right {/* Styles */} } } } CSS Grid vs Flexbox CSS grid vs flexbox - CSS Grid Layout is a two-dimensional system, meaning it can handle both columns and rows, unlike flexbox which is largely a one-dimensional system (either in a column or a row). - A core difference between CSS Grid and Flexbox is that \u2014 CSS Grid\u2019s approach is layout-first while Flexbox\u2019 approach is content-first. - If you are well aware of your content before making layout, then blindly opt for Flexbox and if not, opt for CSS Grid. - Flexbox layout is most appropriate to the components of an application (as most of them are fundamentally linear), and small-scale layouts, while the Grid layout is intended for larger scale layouts which aren\u2019t linear in their design. - If you only need to define a layout as a row or a column, then you probably need flexbox. If you want to define a grid and fit content into it in two dimensions \u2014 you need the grid. Centering Things csstricks centering complete guide Centering line of texts: p { text-align: center } Centering a block or image: p.blocktext { margin-left: auto; margin-right: auto; width: 8em } p class= blocktext Centering vertically: centering 1 centering 2 w3c The trick is to specify that the outer block is to be formatted as a table cell, because the contents of a table cell can be centered vertically. DIV.container { min-height: 10em; display: table-cell; vertical-align: middle; } DIV class= container P This small paragraph /DIV center vertically ex. 2 labelContainer: { display: 'table-cell', verticalAlign: 'middle', height: '30px', }, Centering vertically CSS3: div class=container3 p This paragraph\u2026 /div div.container3 { height: 10em; position: relative } div.container3 p { margin: 0; position: absolute; top: 50%; transform: translate(0, -50%) } Centering with flex: div.container5 { height: 10em; display: flex; align-items: center } div.container5 p { margin: 0 } Centering horizontally and vertically with css level 3 div class=container4 p Centered! /div div.container4 { height: 10em; position: relative } div.container4 p { margin: 0; background: yellow; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%) } Centering horizontally and vertically in flex div.container6 { height: 10em; display: flex; align-items: center; justify-content: center } div.container6 p { margin: 0 } Centering in the viewport in css 3 html style body { background: white } section { background: black; color: white; border-radius: 1em; padding: 1em; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%) } /style section h1 Nicely centered /h1 p This text block is vertically centered. p Horizontally, too, if the window is wide enough. /section Install SASS $ npm install sass-loader node-sass --save-dev Update the webpack.config.js to chain sass-loader , then css-loader and then chain their output to style-loader (Loader-chaining) Module:{ Rules:[ { test:/\\.(s*)css$/, use:['style-loader','css-loader', 'sass-loader'] } ] }, SCSS Import @import 'reset'; SCSS Variables $zHeader: 2000; $zOverlay: 5000; $zMessage: 5050; .header { z-index: $zHeader; } .overlay { z-index: $zOverlay; } .message { z-index: $zMessage; } SCSS Mixins @mixin square($size, $color) { width: $size; height: $size; background-color: $color; } .small-blue-square { @include square(20px, rgb(0,0,255)); } .big-red-square { @include square(300px, rgb(255,0,0)); } SCSS CrossBrowser Mixins @mixin transform-tilt() { $tilt: rotate(15deg); -webkit-transform: $tilt; /* Ch 36, Saf 5.1+, iOS, An = 4.4.4 */ -ms-transform: $tilt; /* IE 9 */ transform: $tilt; /* IE 10, Fx 16+, Op 12.1+ */ } .frame:hover { @include transform-tilt; } SCSS Extend Extending should be used when we need similarly styled elements, which still differ in some detail. .dialog-button { box-sizing: border-box; color: #ffffff; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.12); padding: 12px 40px; cursor: pointer; } .confirm { @extend .dialog-button; background-color: #87bae1; float: left; } .cancel { @extend .dialog-button; background-color: #e4749e; float: right; } SCSS Nesting Organize your stylesheet in a way that resembles the HTML more closely. ul { list-style: none; li { padding: 15px; display: inline-block; a { text-decoration: none; font-size: 16px; color: #444; } } } Nested Pseudo Classes and Pseudo Elements .weather { @extend %module; @include transition(all 0.3s ease-out); background: LightCyan; :hover { background: DarkCyan; } ::before { content: ; display: block; } ... } SCSS Operations $width: 800px; .container { width: $width; } .column-half { width: $width / 2; } .column-fifth { width: $width / 5; } Selectors Descendant Selector all p elements inside div elements div p { background-color: yellow; } Child Selector all p elements that are immediate children of a div element div p { background-color: yellow; } Adjacent Sibling Selector all p elements that are placed immediately after div elements div + p { background-color: yellow; } General Sibling Selector all p elements that are siblings of div elements div ~ p { background-color: yellow; } Select p elements with class=\"center\" p.center Box sizing The box-sizing property can make building CSS layouts easier and a lot more intuitive. padding and border add the width of an object. With box sizing the padding and border of that element no longer increase its width. html { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; } *, *:before, *:after { -webkit-box-sizing: inherit; -moz-box-sizing: inherit; box-sizing: inherit; } TESTING Setup Enzyme Jest Enzyme is a JavaScript Testing utility created for react, maintained by Airbnb that makes it easier to assert, manipulate, and traverse your React Components' output. Jest is a test framework managed by Facebook. install Jest npm install -D jest Install enzyme Along with an Adapter corresponding to the version of react. npm i --save-dev enzyme enzyme-adapter-react-16 enzyme-to-json Jest Setup with React npm install --save-dev jest babel-jest babel-preset-env babel-preset-react react-test-renderer Configure Enzyme to work with Jest in tests /setup/setupEnzyme.js import Enzyme from 'enzyme'; import Adapter from 'enzyme-adapter-react-16'; Enzyme.configure({ adapter: new Adapter() }); Add into babel configuration env : { test : { presets : [ es2015 , react , stage-0 ] } } Install Redux test helper npm install -D redux-mock-store Run tests // Single run $ npm run test // Watchmode $ npm run test:watch Wrapper Debug console.log(wrapper.debug()); Test Component renders import React from 'react'; import { shallow } from 'enzyme'; import toJson from 'enzyme-to-json'; import configureStore from 'redux-mock-store'; // Smart components // Component to be tested import GatorMenu from '../../components/GatorMenu'; describe(' GatorMenu / ', () = { describe('render()', () = { test('renders the component', () = { const wrapper = shallow( GatorMenu / ); const component = wrapper.dive(); expect(toJson(component)).toMatchSnapshot(); }); }); }); Test Simulate Click Call the handler on simulate click. describe(' GatorButton / ', () = { describe('onClick()', () = { test('successfully calls the onClick handler', () = { const mockOnClick = jest.fn(); const wrapper = shallow( GatorButton onClick={mockOnClick} label= Eat Food / ); const component = wrapper.dive(); component.find('button').simulate('click'); expect(mockOnClick.mock.calls.length).toEqual(1); }); }); }); Mocking the store redux-mock-store allows access to: dispatch() getActions() clearActions() import configureStore from 'redux-mock-store'; // Actions to be tested import * as selectActions from '../../actions/select_actions'; const mockStore = configureStore(); const store = mockStore(); // ... Clear Actions // ... describe('select_actions', () = { beforeEach(() = { // Runs before each test in the suite store.clearActions(); }); // ... }); Test Actions Dispatch // ... describe('selectAvatar', () = { test('Dispatches the correct action and payload', () = { const expectedActions = [ { 'payload': 1, 'type': 'select_avatar', }, ]; store.dispatch(selectActions.selectAvatar(1)); expect(store.getActions()).toEqual(expectedActions); }); }); // ... Test Reducer // ... describe('SELECT_AVATAR', () = { test('returns the correct state', () = { const action = { type: SELECT_AVATAR, payload: 1 }; const expectedState = { selectedAvatar: 1 }; expect(selectReducer(undefined, action)).toEqual(expectedState); }); }); // ... Check Text Value it( formats temp correctly , () = { // mount our Temperature component const wrapper = mount( Temperature temp={10} city= Toronto toggleForecast={() = {}} / ); // extract the text from the LargeText styled component const text = wrapper.find( LargeText ).text(); // ensure it matches what is expected expect(text).toEqual( 10\u00b0c ); }); Event Testing with Sinon it( calls toggleForecast on click , () = { // create a spy function const spy = sinon.spy(); // pass spy function as our toggleForecast prop const wrapper = mount( Temperature temp={10} city= Toronto toggleForecast={spy} / ); // find the first div and simulate a click event on it wrapper .find( div ) .first() .simulate( click ); // ensure that our spy (toggleForecast) was called when click was simulated expect(spy.calledOnce).toBe(true); }); import configureStore from 'redux-mock-store'; import { shallow } from 'enzyme'; import { shallowWithIntl, loadTranslationObject } from 'enzyme-react-intl'; import toJson from 'enzyme-to-json'; import renderer from 'react-test-renderer'; import translations from '../src/translations/en.json'; import io from '../src/components/common/io'; loadTranslationObject(translations); const initialState = { open: false, errors: [], elements: [ { id: '0x00000000001', size: '300000', cache_size: '256', state: 'online', }, { id: '0x00000000002', size: '2000', cache_size: '128', state: 'offline', } ] } const mockStore= configureStore(); let store; let wrapper; let instance; beforeEach(() = { store = mockStore(initialState); wrapper = shallowWithIntl( Raids store={store} {...defaultProps} / ).shallow().dive(); instance = wrapper.instance(); }); describe('Check Initial State', () = { it('Open set to false', () = { expect(wrapper.state('open')).toBe(false); }); it('Errors set to empty array', () = { expect(wrapper.state('errors')).toEqual([]); }); }); describe('Simulate Events', () = { it('Calls checkErrors on button click', () = { wrapper.instance().checkErrors = jest.fn(); wrapper.find('.buttonSubmit').simulate('click'); expect(wrapper.instance().checkErrors).toHaveBeenCalled(); }); }); describe('Component Methods', () = { it('Tests state value after calling method', () = { const expectedValue = 'AAAAAAAAAA'; instance.selectName(expectedValue); expect(wrapper.state(['elementName'])).toBe(expectedValue); }); }); describe('Snapshots tests', () = { it('Tests component rendering snapshot', () = { expect(toJson(wrapper)).toMatchSnapshot(); }); it('DisplayErrors match snapshot', () = { const instance = wrapper.instance(); const displayErrors = instance.displayErrors(); const errorRender = renderer.create(displayErrors).toJSON(); expect(errorRender).toMatchSnapshot(); }); }); describe('Component Rendering', () = { it('Renders header', () = { const header = wrapper.find('ModalHeader').exists(); expect(header).toBe(true); }); it('Renders content', () = { const content = wrapper.find('ModalContent').exists(); expect(content).toBe(true); }); it('Renders actions', () = { const actions = wrapper.find('ModalActions').exists(); expect(actions).toBe(true); }); }); describe('Emit data check', () = { const emit = jest.spyOn(io, 'emit'); it('Submit form with correct data', () = { instance.createElement(); const uuid = expect.any(String); expect(emit).toHaveBeenCalledWith('action', { elements: [elementInfo], action_type: 'create_element', uuid }); }); }); Testing with Moxios import thunk from 'redux-thunk'; import configureMockStore from 'redux-mock-store'; import moxios from 'moxios'; import { loadSpsData, loadSpsDataSuccess } from '../../../actions/SpActions'; export const startState = {} const middleware = [thunk]; export const mockStore = configureMockStore(middleware) describe('loadSpsData', () = { beforeEach(function () { moxios.install() }); afterEach(function () { moxios.uninstall() }); it('calls loadSpsData', async () = { const expected_url = 'http://localhost:8080/resource/location'; const SpsData = { data: { sp: { items: {} }, } } const store = mockStore(); let request_url = ''; moxios.wait(() = { const request = moxios.requests.mostRecent(); request.respondWith({ status: 200, response: SpsData }) request_url = request.url; }) const expected = loadSpsDataSuccess(SpsData) await store.dispatch(loadSpsData()).then(() = { const action = store.getActions(); const type = action[0].type; expect(type).toEqual(expected.type); const data = action[0][ spsData ]; expect(data).toEqual(expected.spsData); expect(request_url).toEqual(expected_url); }); }) }); Testing components wrapped in HOC Testing components wrapped in HOC Pseudo Code function calculate_gpa pass in student_grades set grade_total to 0 for each grade in student_grades if grade is not a 1, 2, 3, or 4 print invalid grade print grade print can't complete calculation exit function else add grade to grade_total endif endfor set gpa to grade_total / number of grades return gpa endfunction set reggie_grades to 4, 4, 3, 4 set reggie_gpa to call calculate_gpa with reggie_grades print reggie_gpa","title":"FRONTEND"},{"location":"frontend/#frontend","text":"","title":"FRONTEND"},{"location":"frontend/#javascript","text":"","title":"JAVASCRIPT"},{"location":"frontend/#es6","text":"","title":"ES6"},{"location":"frontend/#typescript","text":"It is a typed superset of Javascript that compiles to plain JavaScript. JavaScript has seen a vast development in the last few years. But, JavaScript was never meant for such large-scale application development. JavaScript is a dynamic programming language with no type system. A no type system means that a variable in JavaScript can have any type of value such as string, number, boolean etc. The type system increases the code quality, readability and makes it an easy to maintain and refactor code base. More importantly, errors can be caught at compile time rather than at run time. Hence, the reason to use TypeScript is that it allows JavaScript to be used at scale.","title":"TYPESCRIPT"},{"location":"frontend/#react","text":"","title":"REACT"},{"location":"frontend/#rest-api","text":"","title":"REST API"},{"location":"frontend/#js-utilities","text":"","title":"JS Utilities"},{"location":"frontend/#graphql","text":"","title":"GRAPHQL"},{"location":"frontend/#socket","text":"socket client socket install npm i socket.io-client const io = require('socket.io-client')('https://'.concat(document.domain).concat(':').concat(location.port)); export default io; io Emit from client import io from './components/common/io'; io.emit('populate_table', { table_name: 'users_table' }); io Receive io.on('isloggedin', (payload) = { ... } Remove listeners io.removeAllListeners('action_response'); socketio server flask from app.server import socketio @socketio.on(socket_names.UPLOAD_LICENSE) def upload_license_action(args): Upload a new license file. data = args['data'] uuid = args['uuid'] sid = request.sid user_store.update_previous_connection(sid) socketio.emit(socket_names.ACTION_TIME, { 'action_time': now(sid)}, room=sid) with thread_lock: socketio.start_background_task( target=upload_license, kwargs={'data': data, 'sid': sid, 'uuid': uuid})","title":"SOCKET"},{"location":"frontend/#css3sass","text":"","title":"CSS3/SASS"},{"location":"frontend/#testing","text":"","title":"TESTING"}]}